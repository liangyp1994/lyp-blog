import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as t,a}from"./app-D5QqES8c.js";const l={},i=a('<h2 id="_1、概述" tabindex="-1"><a class="header-anchor" href="#_1、概述"><span>1、概述</span></a></h2><p>基于需求，该工具将包含两种主要功能：剪切板图片上传以及图片拖拽上传。在用户界面方面，工具需要有清晰直观的设计，用户能够轻松操作、管理图片。</p><h2 id="_2、系统架构" tabindex="-1"><a class="header-anchor" href="#_2、系统架构"><span>2、系统架构</span></a></h2><p>系统由以下部分构成：</p><ol><li><p><strong>剪贴板监听模块</strong>：使用 Fyne 提供的 fyne.Clipboard 对象，我们可以对设备剪贴板进行监控。当剪贴板内容发生变化时，我们可以获取新的内容并判断是否为图片数据。</p></li><li><p><strong>图片预览和上传模块</strong>：通过 Fyne 的 GUI 功能弹出图片预览窗口，同时提供 “上传/取消” 选项。用户的选择将通过事件处理函数进行处理。</p></li><li><p><strong>图片拖拽上传模块</strong>：在 Fyne 的 Canvas 上定义一个可以接收拖拽文件的区域。当用户拖拽图片到该区域时，我们获取这个文件并自动上传。</p></li><li><p><strong>图片管理模块</strong>：使用 Fyne 提供的 List 或 Form 之类的容器组件，显示已上传的图片列表。照片可以按上传日期、名称等属性进行排序，并且用户可以选择删除上传的照片。</p></li><li><p><strong>云存储模块</strong>：负责和云服务提供商进行数据交互，实现图片的存储和读取。通过与 Google Cloud, AWS, Azure 等云储存提供商的 Golang SDK 进行交互，我们可以实现图片的上传和下载。</p></li></ol><p>开发框架选择如下：</p><p><strong>前端</strong>：Fyne</p><p><strong>后端</strong>：Golang</p><h2 id="_3、设计细节" tabindex="-1"><a class="header-anchor" href="#_3、设计细节"><span>3、设计细节</span></a></h2><h3 id="_3-1-剪贴板监听模块" tabindex="-1"><a class="header-anchor" href="#_3-1-剪贴板监听模块"><span>3.1 剪贴板监听模块</span></a></h3><p>开启后，剪贴板模块持续监听剪贴板内容的变化，当检测到新的图片时触发图片预览和上传模块。在 Fyne 中没有原生的监听剪贴板变化的功能，但我们可以通过定时器每隔一段时间读取剪贴板中的内容，和上一次的内容进行对比，如果发现有变化并且内容是图片，就调用图片预览和上传模块。</p><h3 id="_3-2-图片预览和上传模块" tabindex="-1"><a class="header-anchor" href="#_3-2-图片预览和上传模块"><span>3.2 图片预览和上传模块</span></a></h3><p>当触发时，弹出预览窗口并显示剪贴板中的图片。窗口下方有“上传/取消”选项。用户选择&quot;上传&quot;，则调用云存储模块将图片上传；选择&quot;取消&quot;，则关闭窗口并保存剪贴板内容。使用 Fyne 的 dialog.NewFileOpen() 函数打开一个文件选择对话框，然后widget.NewImageFromFile() 来显示图片，最后通过 dialog.NewConfirm()创建一个上传或取消的对话框。</p><h3 id="_3-3-图片拖拽上传模块" tabindex="-1"><a class="header-anchor" href="#_3-3-图片拖拽上传模块"><span>3.3 图片拖拽上传模块</span></a></h3><p>设定一个清晰可见、明确指示的拖拽区域，用户将图片拖拽至此区域，系统自动识别并调用云存储模块进行上传。在 Fyne 中，可以使用 widget.NewEntry() 创建一个 Entry 组件，这个组件支持拖拽功能。当用户拖动图片文件到这个区域时，可以通过 Entry 组件的 OnChanged 事件获取文件路径，再展示图片并调用云存储模块。</p><h3 id="_3-4-图片管理模块" tabindex="-1"><a class="header-anchor" href="#_3-4-图片管理模块"><span>3.4 图片管理模块</span></a></h3><p>提供一个界面，展示已上传的图片，每张图片旁都有删除选项，点击可以删除云端的图片。可以使用 container.NewVBox() 或 container.NewGridWithColumns() 来列出所有的图片，并在图片旁添加一个删除按钮。点击按钮后，调用云存储模块删除对应的图片。</p><h3 id="_3-5-云存储模块" tabindex="-1"><a class="header-anchor" href="#_3-5-云存储模块"><span>3.5 云存储模块</span></a></h3><p>负责与云服务平台进行交互，实现图片的上传、删除和读取。这部分需要具体的选择一个云服务平台，比如 AWS、GCP、Azure等。选择好后，可以使用他们提供的 Go SDK和相关的 API 实现文件的上传、删除和获取链接等功能。</p><h2 id="_4、用户界面设计" tabindex="-1"><a class="header-anchor" href="#_4、用户界面设计"><span>4、用户界面设计</span></a></h2><p>一个直观易用的用户界面对于提升用户体验是至关重要的。我们需要确保每一个界面都符合用户的期望和需求。接下来我会描述如何使用 Fyne 结合这些需求来设计界面。</p><h3 id="_1-主界面" tabindex="-1"><a class="header-anchor" href="#_1-主界面"><span>1. 主界面</span></a></h3><p>使用 Fyne 的布局和窗口管理，我们可以创建一个主界面，主界面中心是一个大的可拖拽区域，拖拽区域可以使用 <code>widget.NewEntry()</code> 创建并自定义样式以提示用户这里可以接收拖拽的图片。在主界面的左上角，我们可以显示一个剪贴板的状态，当剪贴板有新的图片数据时，状态会更新为高亮或者改变内容的方式来告知用户。可是由于fyne不支持拖拽，所以这里使用一个上传图标占位，当点击图标后会打开资源管理器，用户选择文件后进行上传</p><h3 id="_2-上传图片弹窗" tabindex="-1"><a class="header-anchor" href="#_2-上传图片弹窗"><span>2. 上传图片弹窗</span></a></h3><p>当用户通过拖拽方式或剪贴板添加图片时，我们可以使用 <code>dialog.NewCustom()</code> 创建一个新的弹窗，在弹窗内使用 <code>widget.NewImageFromFile()</code> 来展示图片预览。弹窗底部我们可以添加一个 <code>widget.NewCheck()</code> 来创建一个可以点击的 &quot;上传&quot; 和 &quot;取消&quot; 选项。</p><h3 id="_3-图片浏览-管理界面" tabindex="-1"><a class="header-anchor" href="#_3-图片浏览-管理界面"><span>3. 图片浏览/管理界面</span></a></h3><p>这个界面我们可以使用 <code>container.NewVBox()</code> 或 <code>container.NewGridWithColumns()</code> 来列出所有的图片，并在图片之下使用 <code>widget.NewButton()</code> 创建一个删除按钮。用户可以通过这个按钮删除已经上传到云端的图片。</p><h2 id="_5、性能需求" tabindex="-1"><a class="header-anchor" href="#_5、性能需求"><span>5、性能需求</span></a></h2><p>响应速度：图片上传过程需要快，无论是通过剪切板上传还是拖拽上传，应保证用户感知的速度。</p><p>兼容性：需要与各种截图工具以及操作系统能良好兼容，保证稳定运行。</p><p>安全性：在云存储模块的设计中，需要确保数据的保密性和安全性，防止非法访问和数据泄露。</p>',31),o=[i];function r(p,s){return t(),n("div",null,o)}const h=e(l,[["render",r],["__file","图片上传工具设计文档.html.vue"]]),_=JSON.parse('{"path":"/article/developer/%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%B7%A5%E5%85%B7%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3.html","title":"图片上传工具设计文档","lang":"zh-CN","frontmatter":{"title":"图片上传工具设计文档","categories":"产品","description":"1、概述 基于需求，该工具将包含两种主要功能：剪切板图片上传以及图片拖拽上传。在用户界面方面，工具需要有清晰直观的设计，用户能够轻松操作、管理图片。 2、系统架构 系统由以下部分构成： 剪贴板监听模块：使用 Fyne 提供的 fyne.Clipboard 对象，我们可以对设备剪贴板进行监控。当剪贴板内容发生变化时，我们可以获取新的内容并判断是否为图片数...","head":[["meta",{"property":"og:url","content":"https://lianyp.fun/article/developer/%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E5%B7%A5%E5%85%B7%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3.html"}],["meta",{"property":"og:site_name","content":"小道空间"}],["meta",{"property":"og:title","content":"图片上传工具设计文档"}],["meta",{"property":"og:description","content":"1、概述 基于需求，该工具将包含两种主要功能：剪切板图片上传以及图片拖拽上传。在用户界面方面，工具需要有清晰直观的设计，用户能够轻松操作、管理图片。 2、系统架构 系统由以下部分构成： 剪贴板监听模块：使用 Fyne 提供的 fyne.Clipboard 对象，我们可以对设备剪贴板进行监控。当剪贴板内容发生变化时，我们可以获取新的内容并判断是否为图片数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-18T03:29:18.000Z"}],["meta",{"property":"article:author","content":"liangyp"}],["meta",{"property":"article:modified_time","content":"2024-05-18T03:29:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"图片上传工具设计文档\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-18T03:29:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"liangyp\\",\\"url\\":\\"https://lianyp.fun\\"}]}"]]},"headers":[{"level":2,"title":"1、概述","slug":"_1、概述","link":"#_1、概述","children":[]},{"level":2,"title":"2、系统架构","slug":"_2、系统架构","link":"#_2、系统架构","children":[]},{"level":2,"title":"3、设计细节","slug":"_3、设计细节","link":"#_3、设计细节","children":[{"level":3,"title":"3.1 剪贴板监听模块","slug":"_3-1-剪贴板监听模块","link":"#_3-1-剪贴板监听模块","children":[]},{"level":3,"title":"3.2 图片预览和上传模块","slug":"_3-2-图片预览和上传模块","link":"#_3-2-图片预览和上传模块","children":[]},{"level":3,"title":"3.3 图片拖拽上传模块","slug":"_3-3-图片拖拽上传模块","link":"#_3-3-图片拖拽上传模块","children":[]},{"level":3,"title":"3.4 图片管理模块","slug":"_3-4-图片管理模块","link":"#_3-4-图片管理模块","children":[]},{"level":3,"title":"3.5 云存储模块","slug":"_3-5-云存储模块","link":"#_3-5-云存储模块","children":[]}]},{"level":2,"title":"4、用户界面设计","slug":"_4、用户界面设计","link":"#_4、用户界面设计","children":[{"level":3,"title":"1. 主界面","slug":"_1-主界面","link":"#_1-主界面","children":[]},{"level":3,"title":"2. 上传图片弹窗","slug":"_2-上传图片弹窗","link":"#_2-上传图片弹窗","children":[]},{"level":3,"title":"3. 图片浏览/管理界面","slug":"_3-图片浏览-管理界面","link":"#_3-图片浏览-管理界面","children":[]}]},{"level":2,"title":"5、性能需求","slug":"_5、性能需求","link":"#_5、性能需求","children":[]}],"git":{"createdTime":1716002958000,"updatedTime":1716002958000,"contributors":[{"name":"liangyp","email":"2267841523@qq.com","commits":1}]},"readingTime":{"minutes":4.97,"words":1492},"filePathRelative":"article/developer/产品设计/图片上传工具设计文档.md","localizedDate":"2024年5月18日","excerpt":"<h2>1、概述</h2>\\n<p>基于需求，该工具将包含两种主要功能：剪切板图片上传以及图片拖拽上传。在用户界面方面，工具需要有清晰直观的设计，用户能够轻松操作、管理图片。</p>\\n<h2>2、系统架构</h2>\\n<p>系统由以下部分构成：</p>\\n<ol>\\n<li>\\n<p><strong>剪贴板监听模块</strong>：使用 Fyne 提供的 fyne.Clipboard 对象，我们可以对设备剪贴板进行监控。当剪贴板内容发生变化时，我们可以获取新的内容并判断是否为图片数据。</p>\\n</li>\\n<li>\\n<p><strong>图片预览和上传模块</strong>：通过 Fyne 的 GUI 功能弹出图片预览窗口，同时提供 “上传/取消” 选项。用户的选择将通过事件处理函数进行处理。</p>\\n</li>\\n<li>\\n<p><strong>图片拖拽上传模块</strong>：在 Fyne 的 Canvas 上定义一个可以接收拖拽文件的区域。当用户拖拽图片到该区域时，我们获取这个文件并自动上传。</p>\\n</li>\\n<li>\\n<p><strong>图片管理模块</strong>：使用 Fyne 提供的 List 或 Form 之类的容器组件，显示已上传的图片列表。照片可以按上传日期、名称等属性进行排序，并且用户可以选择删除上传的照片。</p>\\n</li>\\n<li>\\n<p><strong>云存储模块</strong>：负责和云服务提供商进行数据交互，实现图片的存储和读取。通过与 Google Cloud, AWS, Azure 等云储存提供商的 Golang SDK 进行交互，我们可以实现图片的上传和下载。</p>\\n</li>\\n</ol>","autoDesc":true}');export{h as comp,_ as data};
