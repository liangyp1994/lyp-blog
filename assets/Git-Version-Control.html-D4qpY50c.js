import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as n,a as s}from"./app-DQ7uMTFd.js";const t={},i=s(`<p>作为一个后端开发，我每天都在使用GIT，但因为习惯了使用IDE中的UI页面操作，今天在开发一个前端项目时候才发现自己已经把命令忘得差不多了，真的是有必要再翻出来学习一下了。</p><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>一个分布式的版本管理系统</p><p><strong>原理：</strong></p><ol><li><p><strong>分布式：</strong> Git 是一种分布式版本控制系统，意味着每个开发者都可以拥有完整的代码仓库副本，而不是依赖于一个中央服务器。这种分布式的架构使得开发者可以在本地进行工作，包括提交代码、创建分支等操作，而不必一直依赖网络连接。</p></li><li><p><strong>快照存储：</strong> Git 不仅跟踪文件的变化，而是通过记录文件的快照来管理文件的历史版本。每次提交操作都会创建一个快照，这种方式有效地减少了数据冗余，且可以快速地查看文件的变化历史。</p></li><li><p><strong>分支管理：</strong> Git 的分支概念非常强大，开发者可以轻松创建、合并和删除分支，从而实现并行开发、功能隔离等操作，提高团队的协作效率。</p></li></ol><p><strong>作用：</strong></p><ol><li><p><strong>版本控制：</strong> Git 可以帮助开发者追踪文件的变化历史，以及回溯到不同版本的代码，从而可以轻松地管理和比较不同版本之间的差异。</p></li><li><p><strong>协作：</strong> Git 可以有效地实现团队成员之间的协作开发。通过分支管理、代码合并等功能，团队成员可以同时开发不同的功能模块，并最终将他们的工作整合在一起。</p></li><li><p><strong>备份和恢复：</strong> Git 提供了对代码仓库的完整备份，开发者可以将代码的整个历史存储在本地或者远程仓库中，保证数据的安全性，并在需要时快速恢复到历史状态。</p></li></ol><p><strong>术语：</strong></p><ol><li><strong>仓库（Repository）：</strong> Git 仓库是用于存储代码的地方，可以是本地仓库（Local Repository）或远程仓库（Remote Repository）。</li><li><strong>提交（Commit）：</strong> 提交是指将代码修改的快照保存到 Git 仓库中，通常包含一个描述性的提交信息。</li><li><strong>分支（Branch）：</strong> 分支是代码开发的不同线路，相当于在代码库中独立的开发路径。</li><li><strong>合并（Merge）：</strong> 合并是将一个分支的代码变更合并到另一个分支中。</li><li><strong>拉取（Pull）和推送（Push）：</strong> 拉取是从远程仓库获取最新代码，推送是将本地代码变更上传到远程仓库。</li><li><strong>工作区（Working Directory）和暂存区（Staging Area）：</strong> 工作区是修改代码的地方，暂存区是保存待提交的代码快照的地方。</li><li><strong>撤销（Revert）和重置（Reset）：</strong> 撤销是撤销某次提交的修改，重置是将仓库的状态重置到某个指定的提交。</li><li><strong>冲突（Conflict）：</strong> 冲突发生在合并不同分支时，同一个文件的不同部分有冲突需要手动解决。</li></ol><p><strong>简单流程：</strong></p><ol><li><strong>克隆（Clone）一个仓库：</strong> 使用 <code>git clone</code> 命令将远程仓库克隆到本地。</li><li><strong>在工作区修改代码：</strong> 在工作区进行代码编写和修改。</li><li><strong>将修改添加到暂存区：</strong> 使用 <code>git add</code> 命令将修改的文件添加到暂存区。</li><li><strong>提交修改：</strong> 使用 <code>git commit</code> 命令将暂存区的内容提交到仓库。</li><li><strong>推送到远程仓库：</strong> 使用 <code>git push</code> 命令将本地仓库的修改推送到远程仓库。</li><li><strong>拉取远程仓库最新变更：</strong> 使用 <code>git pull</code> 命令从远程仓库拉取最新的代码变更。</li></ol><h2 id="安装git" tabindex="-1"><a class="header-anchor" href="#安装git"><span>安装GIT</span></a></h2><p><strong>安装：</strong></p><p>安装过程很简单 无非就是到 <a href="https://git-scm.com" target="_blank" rel="noopener noreferrer">GIT官网</a> 下载对应平台的程序安装即可，跟普通软件安装是一样，只需要选择好合适的安装路径。</p><p><strong>配置：</strong></p><p>配置你的用户名和邮箱</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;Your Name&quot;</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;you@example.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>查看所有配置项</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--list</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="创建和管理仓库" tabindex="-1"><a class="header-anchor" href="#创建和管理仓库"><span>创建和管理仓库</span></a></h2><h3 id="仓库初始化" tabindex="-1"><a class="header-anchor" href="#仓库初始化"><span>仓库初始化</span></a></h3><p>当远程没有项目仓库你需要在本地项目下初始化一个本地仓库，执行下面命令将会在项目路径下创建一个 <code>.git</code> 文件夹。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当远程仓库已存在，你需要通过 <code>pull</code> 指令拉取远程代码</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> clone <span class="token operator">&lt;</span>remote_repository_URL<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="开发阶段" tabindex="-1"><a class="header-anchor" href="#开发阶段"><span>开发阶段</span></a></h3><h4 id="暂存" tabindex="-1"><a class="header-anchor" href="#暂存"><span>暂存</span></a></h4><p>添加修改的文件到暂存区, 通过add命令</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token operator">&lt;</span>file_name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>&lt;file_name&gt;</code> 参数应该是您要添加到暂存区的文件名或文件路径。可以指定单个文件名或多个文件名，甚至可以使用通配符来匹配多个文件。</p><p><strong>示例：</strong></p><ol><li><p>添加单个文件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>添加多个文件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> index.html style.css script.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用通配符：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> *.html   <span class="token comment"># 添加所有 .html 文件</span>
<span class="token function">git</span> <span class="token function">add</span> src/*    <span class="token comment"># 添加 src 目录下所有文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><blockquote><p>可以通过 git status 查看状态，Changes to be committed: 表示的就是待提交的文件，也就是暂存。</p></blockquote><h4 id="提交" tabindex="-1"><a class="header-anchor" href="#提交"><span>提交</span></a></h4><p>暂存区文件提交</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;Commit message&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看提交历史</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>撤销提交</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 撤销最近的提交并保留更改</span>
<span class="token function">git</span> reset HEAD~1


<span class="token comment"># 撤销提交并丢弃更改</span>
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD~1


<span class="token comment"># 撤销已推送到远程仓库的提交,并不会删除指定的提交 它的底层是 会创建一个新的提交，撤销指定的提交</span>
<span class="token function">git</span> revert <span class="token operator">&lt;</span>commit_SHA<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分支管理" tabindex="-1"><a class="header-anchor" href="#分支管理"><span>分支管理</span></a></h2><ol><li><p>创建分支：</p><ul><li>使用<code>git branch &lt;branch-name&gt;</code>命令可以创建一个新的分支，分支名称可以自定义。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> branch new-feature
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>查看所有分支：</p><ul><li>使用<code>git branch</code>命令可以查看所有本地分支，并且已处于当前分支的前面有一个<code>*</code>标志。 参数 <code>-r</code> 可查看远程分支</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>切换分支：</p><ul><li>使用<code>git checkout &lt;branch-name&gt;</code>命令可以切换到指定的分支。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout new-feature
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建并切换分支：</p><ul><li>使用<code>git checkout -b &lt;branch-name&gt;</code>命令可以创建并切换到新的分支。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout <span class="token parameter variable">-b</span> new-feature
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>合并分支：</p><ul><li>在完成对新分支的工作后，可以切换回主分支并使用<code>git merge &lt;branch-name&gt;</code>命令将新分支合并到当前分支。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout maingit merge new-feature
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>删除分支：</p><ul><li>使用<code>git branch -d &lt;branch-name&gt;</code>命令可以删除不需要的分支。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> branch <span class="token parameter variable">-d</span> new-feature
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>使用<code>git push &lt;remote-name&gt; --delete &lt;branch-name&gt;</code>命令将指定的远程分支删除</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> push <span class="token operator">&lt;</span>remote-name<span class="token operator">&gt;</span> <span class="token parameter variable">--delete</span> new-feature
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h2 id="远程仓库操作" tabindex="-1"><a class="header-anchor" href="#远程仓库操作"><span>远程仓库操作</span></a></h2><ol><li><p>添加远程仓库：</p><ul><li>使用 <code>git remote add &lt;remote-name&gt; &lt;remote-url&gt;</code> 命令添加远程仓库，<code>&lt;remote-name&gt;</code> 为远程仓库的名称，<code>&lt;remote-url&gt;</code> 为远程仓库的 URL。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/username/repository.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>查看远程仓库：</p><ul><li>使用 <code>git remote -v</code> 命令可以查看远程仓库的名称和对应的 URL。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token parameter variable">-v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>推送代码到远程仓库：</p><ul><li>使用 <code>git push &lt;remote-name&gt; &lt;branch-name&gt;</code> 命令将本地代码推送到指定的远程仓库和分支。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>拉取远程仓库代码：</p><ul><li>使用 <code>git pull &lt;remote-name&gt; &lt;branch-name&gt;</code> 命令从远程仓库拉取最新的代码到本地仓库和分支。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> pull origin main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>git fetch</code>命令会从远程仓库下载最新的提交和数据，但不会自动合并这些改动到当前分支。首先通过<code>git fetch</code>获取最新的代码到本地，然后使用<code>git checkout</code>切换到您想要更新的分支，并通过<code>git merge</code>将远程分支的改动合并到当前分支。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> fetch
<span class="token function">git</span> checkout <span class="token operator">&lt;</span>branch-name<span class="token operator">&gt;</span>
<span class="token function">git</span> merge origin/<span class="token operator">&lt;</span>branch-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><blockquote><ul><li><p><code>git fetch</code>：用于从远程仓库下载最新的代码和历史记录，但并不自动合并或更新您当前的工作目录。执行<code>git fetch</code>会将远程仓库的最新更新下载到本地，但不会直接修改您当前所在的分支。</p></li><li><p><code>git pull</code>：是将<code>git fetch</code>和<code>git merge</code>两个操作结合起来的一个命令，用于从远程仓库获取最新的代码并合并到当前分支。执行<code>git pull</code>会自动下载远程仓库的最新内容，并尝试将其合并到您当前所在的分支。</p></li></ul></blockquote>`,45),l=[i];function o(d,r){return n(),a("div",null,l)}const g=e(t,[["render",o],["__file","Git-Version-Control.html.vue"]]),u=JSON.parse('{"path":"/article/developer/backend/Git-Version-Control.html","title":"GIT-软件开发离不开的工具之一","lang":"zh-CN","frontmatter":{"title":"GIT-软件开发离不开的工具之一","date":"2024-05-22T00:00:00.000Z","categories":"后端","description":"作为一个后端开发，我每天都在使用GIT，但因为习惯了使用IDE中的UI页面操作，今天在开发一个前端项目时候才发现自己已经把命令忘得差不多了，真的是有必要再翻出来学习一下了。 介绍 一个分布式的版本管理系统 原理： 分布式： Git 是一种分布式版本控制系统，意味着每个开发者都可以拥有完整的代码仓库副本，而不是依赖于一个中央服务器。这种分布式的架构使得开...","head":[["meta",{"property":"og:url","content":"https://lianyp.fun/article/developer/backend/Git-Version-Control.html"}],["meta",{"property":"og:site_name","content":"小道空间-Vuepress开源轻博客系统"}],["meta",{"property":"og:title","content":"GIT-软件开发离不开的工具之一"}],["meta",{"property":"og:description","content":"作为一个后端开发，我每天都在使用GIT，但因为习惯了使用IDE中的UI页面操作，今天在开发一个前端项目时候才发现自己已经把命令忘得差不多了，真的是有必要再翻出来学习一下了。 介绍 一个分布式的版本管理系统 原理： 分布式： Git 是一种分布式版本控制系统，意味着每个开发者都可以拥有完整的代码仓库副本，而不是依赖于一个中央服务器。这种分布式的架构使得开..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-22T05:58:45.000Z"}],["meta",{"property":"article:author","content":"梁小道"}],["meta",{"property":"article:published_time","content":"2024-05-22T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-22T05:58:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"GIT-软件开发离不开的工具之一\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-22T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-22T05:58:45.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"梁小道\\",\\"url\\":\\"https://lianyp.fun\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"安装GIT","slug":"安装git","link":"#安装git","children":[]},{"level":2,"title":"创建和管理仓库","slug":"创建和管理仓库","link":"#创建和管理仓库","children":[{"level":3,"title":"仓库初始化","slug":"仓库初始化","link":"#仓库初始化","children":[]},{"level":3,"title":"开发阶段","slug":"开发阶段","link":"#开发阶段","children":[]}]},{"level":2,"title":"分支管理","slug":"分支管理","link":"#分支管理","children":[]},{"level":2,"title":"远程仓库操作","slug":"远程仓库操作","link":"#远程仓库操作","children":[]}],"git":{"createdTime":1716357525000,"updatedTime":1716357525000,"contributors":[{"name":"liangyp","email":"2267841523@qq.com","commits":1}]},"readingTime":{"minutes":7.11,"words":2132},"filePathRelative":"article/developer/backend/Git-Version-Control.md","localizedDate":"2024年5月22日","excerpt":"<p>作为一个后端开发，我每天都在使用GIT，但因为习惯了使用IDE中的UI页面操作，今天在开发一个前端项目时候才发现自己已经把命令忘得差不多了，真的是有必要再翻出来学习一下了。</p>\\n<h2>介绍</h2>\\n<p>一个分布式的版本管理系统</p>\\n<p><strong>原理：</strong></p>\\n<ol>\\n<li>\\n<p><strong>分布式：</strong>&nbsp;Git 是一种分布式版本控制系统，意味着每个开发者都可以拥有完整的代码仓库副本，而不是依赖于一个中央服务器。这种分布式的架构使得开发者可以在本地进行工作，包括提交代码、创建分支等操作，而不必一直依赖网络连接。</p>\\n</li>\\n<li>\\n<p><strong>快照存储：</strong>&nbsp;Git 不仅跟踪文件的变化，而是通过记录文件的快照来管理文件的历史版本。每次提交操作都会创建一个快照，这种方式有效地减少了数据冗余，且可以快速地查看文件的变化历史。</p>\\n</li>\\n<li>\\n<p><strong>分支管理：</strong>&nbsp;Git 的分支概念非常强大，开发者可以轻松创建、合并和删除分支，从而实现并行开发、功能隔离等操作，提高团队的协作效率。</p>\\n</li>\\n</ol>","autoDesc":true}');export{g as comp,u as data};
