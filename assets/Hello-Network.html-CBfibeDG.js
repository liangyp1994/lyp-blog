import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-BEhkVDlh.js";const e={},p=t(`<p>在Java中，网络编程是通过Java的网络编程接口实现的，主要使用<code>java.net</code>包中的类和接口来实现网络通信。</p><h2 id="socket编程" tabindex="-1"><a class="header-anchor" href="#socket编程"><span>Socket编程</span></a></h2><p>Socket编程是Java中实现网络通信的基础，通过Socket类可以实现客户端和服务器之间的通信。</p><ul><li>创建服务器端：</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Socket</span> socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>创建客户端：</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="使用inputstream和outputstream进行数据读写" tabindex="-1"><a class="header-anchor" href="#使用inputstream和outputstream进行数据读写"><span>使用InputStream和OutputStream进行数据读写</span></a></h2><p>通过Socket的InputStream和OutputStream可以实现数据的读写操作。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 从客户端读取数据</span>
<span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> message <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 向客户端发送数据</span>
<span class="token class-name">OutputStream</span> outputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">OutputStreamWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, Client!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
writer<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用serversocket和socket建立服务端和客户端的连接" tabindex="-1"><a class="header-anchor" href="#使用serversocket和socket建立服务端和客户端的连接"><span>使用ServerSocket和Socket建立服务端和客户端的连接</span></a></h2><p>通过ServerSocket和Socket建立服务器端和客户端之间的连接，能够实现双向通信。</p><h2 id="多线程编程" tabindex="-1"><a class="header-anchor" href="#多线程编程"><span>多线程编程</span></a></h2><p>在网络编程中通常需要使用多线程来处理客户端的请求，以避免阻塞情况。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 服务器端处理客户端请求</span>
<span class="token class-name">Thread</span> clientThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理客户端请求的逻辑</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
clientThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="url编程" tabindex="-1"><a class="header-anchor" href="#url编程"><span>URL编程</span></a></h2><p>Java提供了URL类用于处理URL链接，可以通过URL类打开一个连接并获取数据。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&quot;http://www.example.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">URLConnection</span> connection <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用urlconnection建立连接" tabindex="-1"><a class="header-anchor" href="#使用urlconnection建立连接"><span>使用URLConnection建立连接</span></a></h2><p>URLConnection可以向指定的URL发送请求，并返回相应的数据。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&quot;http://www.example.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">HttpURLConnection</span> connection <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">)</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
connection<span class="token punctuation">.</span><span class="token function">setRequestMethod</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现http协议" tabindex="-1"><a class="header-anchor" href="#实现http协议"><span>实现HTTP协议</span></a></h2><p>通过URLConnection和HttpURLConnection类，可以实现基于HTTP协议的网络通信，实现HTTP请求和响应操作。</p>`,23),o=[p];function c(l,i){return s(),a("div",null,o)}const k=n(e,[["render",c],["__file","Hello-Network.html.vue"]]),d=JSON.parse('{"path":"/java/Java-Guide/Hello-Network.html","title":"Java中的网络编程","lang":"zh-CN","frontmatter":{"title":"Java中的网络编程","article":false,"order":8,"description":"在Java中，网络编程是通过Java的网络编程接口实现的，主要使用`java.net`包中的类和接口来实现网络通信。","head":[["meta",{"property":"og:url","content":"https://lianyp.fun/lyp-blog/java/Java-Guide/Hello-Network.html"}],["meta",{"property":"og:site_name","content":"小道空间-Vuepress开源轻博客系统"}],["meta",{"property":"og:title","content":"Java中的网络编程"}],["meta",{"property":"og:description","content":"在Java中，网络编程是通过Java的网络编程接口实现的，主要使用`java.net`包中的类和接口来实现网络通信。"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-25T01:28:19.000Z"}],["meta",{"property":"article:author","content":"梁小道"}],["meta",{"property":"article:modified_time","content":"2024-05-25T01:28:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Java中的网络编程\\",\\"description\\":\\"在Java中，网络编程是通过Java的网络编程接口实现的，主要使用`java.net`包中的类和接口来实现网络通信。\\"}"]]},"headers":[{"level":2,"title":"Socket编程","slug":"socket编程","link":"#socket编程","children":[]},{"level":2,"title":"使用InputStream和OutputStream进行数据读写","slug":"使用inputstream和outputstream进行数据读写","link":"#使用inputstream和outputstream进行数据读写","children":[]},{"level":2,"title":"使用ServerSocket和Socket建立服务端和客户端的连接","slug":"使用serversocket和socket建立服务端和客户端的连接","link":"#使用serversocket和socket建立服务端和客户端的连接","children":[]},{"level":2,"title":"多线程编程","slug":"多线程编程","link":"#多线程编程","children":[]},{"level":2,"title":"URL编程","slug":"url编程","link":"#url编程","children":[]},{"level":2,"title":"使用URLConnection建立连接","slug":"使用urlconnection建立连接","link":"#使用urlconnection建立连接","children":[]},{"level":2,"title":"实现HTTP协议","slug":"实现http协议","link":"#实现http协议","children":[]}],"git":{"createdTime":1716535397000,"updatedTime":1716600499000,"contributors":[{"name":"liangyp","email":"2267841523@qq.com","commits":2}]},"readingTime":{"minutes":1.55,"words":465},"filePathRelative":"java/Java-Guide/Hello-Network.md","localizedDate":"2024年5月24日","excerpt":"<p>在Java中，网络编程是通过Java的网络编程接口实现的，主要使用<code>java.net</code>包中的类和接口来实现网络通信。</p>\\n<h2>Socket编程</h2>\\n<p>Socket编程是Java中实现网络通信的基础，通过Socket类可以实现客户端和服务器之间的通信。</p>\\n<ul>\\n<li>创建服务器端：</li>\\n</ul>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">ServerSocket</span> serverSocket <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ServerSocket</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">8080</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">Socket</span> socket <span class=\\"token operator\\">=</span> serverSocket<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">accept</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>"}');export{k as comp,d as data};
