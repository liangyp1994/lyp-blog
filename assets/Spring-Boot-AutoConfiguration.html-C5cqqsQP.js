import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-BEhkVDlh.js";const o={},e=t(`<h2 id="自动装配" tabindex="-1"><a class="header-anchor" href="#自动装配"><span>自动装配</span></a></h2><p>下面是Springboot启动类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoApplication</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">DemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接启动main方法就能开启一个web项目，为何Springboot项目能够开箱即用，核心就是自动装配</p><h3 id="什么是自动装配" tabindex="-1"><a class="header-anchor" href="#什么是自动装配"><span>什么是自动装配</span></a></h3><p>实际上在Spring Boot 出来之前，Spring框架已经有了自动装配的功能，而 Spring Boot只是在其基础上，通过SPI的方式进行优化，</p><p>详细可到官网了解 Spring Boot的接口规范，了解具体它在启动时如何进行扫描，加载。所以外部引用jar包如果按其规范标准就可以将自己的功能装配到Spring Boot中。</p><p>具体可以看另一篇文章 如何自定义Spring Starter</p><h3 id="spring-boot-是如何实现自动装配" tabindex="-1"><a class="header-anchor" href="#spring-boot-是如何实现自动装配"><span>Spring Boot 是如何实现自动装配</span></a></h3><p>先了解下注解 SpringBootApplication，作为启动类的注解它如何工作呢</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@SpringBootConfiguration</span>
<span class="token annotation punctuation">@EnableAutoConfiguration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">CUSTOM</span><span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token class-name">TypeExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">CUSTOM</span><span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token class-name">AutoConfigurationExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>SpringBootonfiguration： 里面可以看到注解 Configuration 允许搜索配置类，注册Bean对象。 EnableAutoConfiguration：启动自动配置机制 ComponentScan：组件扫描，可以指定跳过扫描，排除哪些自动配置</p></blockquote><p>既然要研究自动装配，这里就重点看下@EnableAutoConfiguration，</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@AutoConfigurationPackage</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">AutoConfigurationImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到这里导入了 AutoConfigurationImportSelector 这个类，</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoConfigurationImportSelector</span> <span class="token keyword">implements</span> <span class="token class-name">DeferredImportSelector</span><span class="token punctuation">,</span> <span class="token class-name">BeanClassLoaderAware</span><span class="token punctuation">,</span>
  <span class="token class-name">ResourceLoaderAware</span><span class="token punctuation">,</span> <span class="token class-name">BeanFactoryAware</span><span class="token punctuation">,</span> <span class="token class-name">EnvironmentAware</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>里面除了实现一些 *Aware接口，还实现了 DeferredImportSelector 接口 DeferredImportSelector 又实现了 ImportSelector</p><p>通过实现 selectImports 方法 获取到所有符合条件的类，这些类会被加载到IOC容器中。</p><p>具体的话</p><p>判断是否开启了自动装配 是则进行下一步 获取EnableAutoConfiguration注解的exclude和excludeName，决定哪些需要排除 获取需要自动装配的类 从 META-INF/spring.factories ，注意SpringBoot版本，升级后的位置有调整，这样所有Starter下的自动装配类都获取到了 随后根据@ConditionalOn*进行条件判断，只有满足条件该类才会生效</p>`,20),p=[e];function c(i,l){return s(),a("div",null,p)}const d=n(o,[["render",c],["__file","Spring-Boot-AutoConfiguration.html.vue"]]),k=JSON.parse('{"path":"/article/developer/backend/Spring-Boot-AutoConfiguration.html","title":"Spring boot的自动装配原理","lang":"zh-CN","frontmatter":{"title":"Spring boot的自动装配原理","date":"2024-05-31T00:00:00.000Z","categories":"后端","tags":["SpringBoot"],"description":"自动装配 下面是Springboot启动类 直接启动main方法就能开启一个web项目，为何Springboot项目能够开箱即用，核心就是自动装配 什么是自动装配 实际上在Spring Boot 出来之前，Spring框架已经有了自动装配的功能，而 Spring Boot只是在其基础上，通过SPI的方式进行优化， 详细可到官网了解 Spring Boo...","head":[["meta",{"property":"og:url","content":"https://lianyp.fun/lyp-blog/article/developer/backend/Spring-Boot-AutoConfiguration.html"}],["meta",{"property":"og:site_name","content":"小道空间-Vuepress开源轻博客系统"}],["meta",{"property":"og:title","content":"Spring boot的自动装配原理"}],["meta",{"property":"og:description","content":"自动装配 下面是Springboot启动类 直接启动main方法就能开启一个web项目，为何Springboot项目能够开箱即用，核心就是自动装配 什么是自动装配 实际上在Spring Boot 出来之前，Spring框架已经有了自动装配的功能，而 Spring Boot只是在其基础上，通过SPI的方式进行优化， 详细可到官网了解 Spring Boo..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-31T09:13:50.000Z"}],["meta",{"property":"article:author","content":"梁小道"}],["meta",{"property":"article:tag","content":"SpringBoot"}],["meta",{"property":"article:published_time","content":"2024-05-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-31T09:13:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring boot的自动装配原理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-31T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-31T09:13:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"梁小道\\",\\"url\\":\\"https://lianyp.fun\\"}]}"]]},"headers":[{"level":2,"title":"自动装配","slug":"自动装配","link":"#自动装配","children":[{"level":3,"title":"什么是自动装配","slug":"什么是自动装配","link":"#什么是自动装配","children":[]},{"level":3,"title":"Spring Boot 是如何实现自动装配","slug":"spring-boot-是如何实现自动装配","link":"#spring-boot-是如何实现自动装配","children":[]}]}],"git":{"createdTime":1717146830000,"updatedTime":1717146830000,"contributors":[{"name":"liangyp","email":"2267841523@qq.com","commits":1}]},"readingTime":{"minutes":1.75,"words":526},"filePathRelative":"article/developer/backend/Spring-Boot-AutoConfiguration.md","localizedDate":"2024年5月31日","excerpt":"<h2>自动装配</h2>\\n<p>下面是Springboot启动类</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@SpringBootApplication</span>\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">DemoApplication</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">SpringApplication</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">run</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">DemoApplication</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">,</span> args<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
