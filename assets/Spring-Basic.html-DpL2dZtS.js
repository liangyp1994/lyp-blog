import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as i,a}from"./app-BEhkVDlh.js";const p={},r=a('<p>记得我刚刚学习Spring的时候，直接上来就是怎么安装使用，根本没有了解它是什么，为什么会有这个框架。</p><h2 id="什么是spring框架" tabindex="-1"><a class="header-anchor" href="#什么是spring框架"><span>什么是Spring框架？</span></a></h2><p>Spring是一款开源的Java开发框架，为了提高开发人员的开发效率（确实，跟病毒一样有传染性）。</p><p>它的核心就是IOC和AOP，另外还可以方便的完成数据库访问，第三方组件的集成。它的目标就是降低门槛，提高开发效率。</p><h2 id="各个模块之间的依赖关系" tabindex="-1"><a class="header-anchor" href="#各个模块之间的依赖关系"><span>各个模块之间的依赖关系</span></a></h2><p>Spring 各个模块的依赖关系</p><p>Core, Beans, Aop, Context, Tx, Jdbc, Support, Web, WebSocket, WebMvc, Orm, WebFlex, Aspects</p><h3 id="core-container" tabindex="-1"><a class="header-anchor" href="#core-container"><span>Core Container</span></a></h3><p>Spring框架的核心模块，主要提供IOC功能的支持，其他模块的基础。</p><p>spring-core: Spring框架的核心 工具类 相关基础对象 spring-beans: 提供了Bean创建，配置和管理等等功能的支持 spring-context: 如国际化，资源加载等等功能的支持 spring-expression: SpEL的支持，spring的表达式语言，也算是一个基础支撑</p><h3 id="aop" tabindex="-1"><a class="header-anchor" href="#aop"><span>Aop</span></a></h3><p>spring-aspects: 为AspectJ的集成提供了支持 spring-aop: 面向切面的支持 spring-instrument: 提供了为JVM添加agent的功能支持</p><h3 id="data-access-integration" tabindex="-1"><a class="header-anchor" href="#data-access-integration"><span>Data Access/Integration</span></a></h3><p>spring-jdbc: 对数据库访问的支持，不同数据库操作的API都相互独立 spring-tx: 提供对事务的支持 spring-orm: 对ORM框架的支持 如Hibernate ， Mybatis spring-oxm: 对象到XML的映射 spring-jms: 消息服务</p><h3 id="spring-web" tabindex="-1"><a class="header-anchor" href="#spring-web"><span>Spring Web</span></a></h3><p>spring-web: 对web功能的基础支持 spring-webmvc: mvc架构的实现支持 spring-websocket spring-webflex</p><h3 id="message" tabindex="-1"><a class="header-anchor" href="#message"><span>Message</span></a></h3><p>Spring 4.x开始新添加的模块，主要负责Spring框架基础的报文传送应用</p><h3 id="spring-test" tabindex="-1"><a class="header-anchor" href="#spring-test"><span>Spring Test</span></a></h3><p>测试，单元测试， Mock对象</p><h2 id="spring中用到的设计模式" tabindex="-1"><a class="header-anchor" href="#spring中用到的设计模式"><span>Spring中用到的设计模式</span></a></h2><p>工厂设计模式 代理设计模式 单例模式 模版模式 包装器模式 观察者模式 适配器模式</p><h2 id="spring中的事务管理" tabindex="-1"><a class="header-anchor" href="#spring中的事务管理"><span>Spring中的事务管理</span></a></h2><h3 id="spring-管理事务的方式" tabindex="-1"><a class="header-anchor" href="#spring-管理事务的方式"><span>Spring 管理事务的方式</span></a></h3><p>编程式：代码中硬编码，通过 TransactionTemplate或者TransactionManager手动管理，事务范围不要过大，可能出现事务未提交导致超时，因此事务要比锁的粒度更小- 没用过</p><p>声明式：通过xml配置文件或注解@Transactional</p><h3 id="spring-事务的传播行为" tabindex="-1"><a class="header-anchor" href="#spring-事务的传播行为"><span>Spring 事务的传播行为</span></a></h3><p>在实际项目中 业务逻辑错综复杂，方法之间相互调用，可能出现事务的冲突，这是就需要依赖于传播行为。</p><p>当事务方法调用另一个事务方法，指定该事务如何传播。传播行为可以设置为：</p><p>TransactionDefinition.PROPAGATION_REQUIRED</p><p>使用最多的，也是@Transactional注解默认的。如存在事务就加入该事务，如没有事务则创建一个新的事务。</p><p>举例说明：方法1 调用 方法2 ，其中方法1对表A的一条数据的字段进行了更新，当方法2中要使用到表A的那条数据，你说它是应该拿到更新后的还是更新前的数值呢？正常我们都是希望拿到最新的也就是更新后的数值，那么方法2是不是应该加入到方法1的事务中呢？</p><p>TransactionDefinition.PROPAGATION_REQUIRES_NEW</p><p>顾名思义，它将创建一个新的事务，如果已经有了事务，则把该事务挂起，该传播行为会保证自己方法内是一个独立的事务，与外部隔离。</p><p>TransactionDefinition.PROPAGATION_NESTED</p><p>如果存在事务，则创建一个嵌套事务来运行，如果没有则新建一个事务。</p><p>TransactionDefinition.PROPAGATION_MANDATORY</p><p>如果当前存在事务，则加入该事务，如果没有则抛出异常，用的少，不应随便异常</p><p>非事务</p><p>TransactionDefinition.PROPAGATION_SUPPORTS: 存在事务则加入，否则以非事务的方式运行（有事务能力的，可支持） TransactionDefinition.PROPAGATION_NOT_SUPPORTED:以非事务方式运行，如果存在事务，则将当前事务挂起（无事务能力，不支持） TransactionDefinition.PROPAGATION_NEVER: 以非事务方式运行，如果当前存在事务会抛出异常（拒绝事务，滚）</p><h3 id="spring-事务的隔离级别" tabindex="-1"><a class="header-anchor" href="#spring-事务的隔离级别"><span>Spring 事务的隔离级别</span></a></h3><p>相比事务的传播行为，隔离级别更加的底层。决定了数据的读取和写入</p><p>TransactionDefinition.ISOLATION_DEFAULT: 使用数据库默认的隔离级别，对于Mysql默认采用可重复读隔离级别，而Oracle则是读已提交隔离级别 读未提交，最低的隔离级别，它允许读取尚未提交的数据 读已提交，允许读取并发事务已经提交的数据，避免了脏读 可重复度，对一个字段的多次读取结果是一致的，避免了脏读和不可重复读 串行化，最高的隔离级别，事务逐个执行，这样就不存在干扰，当然也就防止了脏读，不可重复读，幻读，但通常不用，因为性能太差。</p>',43),t=[r];function s(c,o){return i(),n("div",null,t)}const h=e(p,[["render",s],["__file","Spring-Basic.html.vue"]]),d=JSON.parse('{"path":"/article/developer/backend/Spring-Basic.html","title":"Spring基础","lang":"zh-CN","frontmatter":{"title":"Spring基础","date":"2024-05-31T00:00:00.000Z","categories":"后端","tags":["Spring"],"description":"记得我刚刚学习Spring的时候，直接上来就是怎么安装使用，根本没有了解它是什么，为什么会有这个框架。 什么是Spring框架？ Spring是一款开源的Java开发框架，为了提高开发人员的开发效率（确实，跟病毒一样有传染性）。 它的核心就是IOC和AOP，另外还可以方便的完成数据库访问，第三方组件的集成。它的目标就是降低门槛，提高开发效率。 各个模块...","head":[["meta",{"property":"og:url","content":"https://lianyp.fun/lyp-blog/article/developer/backend/Spring-Basic.html"}],["meta",{"property":"og:site_name","content":"小道空间-Vuepress开源轻博客系统"}],["meta",{"property":"og:title","content":"Spring基础"}],["meta",{"property":"og:description","content":"记得我刚刚学习Spring的时候，直接上来就是怎么安装使用，根本没有了解它是什么，为什么会有这个框架。 什么是Spring框架？ Spring是一款开源的Java开发框架，为了提高开发人员的开发效率（确实，跟病毒一样有传染性）。 它的核心就是IOC和AOP，另外还可以方便的完成数据库访问，第三方组件的集成。它的目标就是降低门槛，提高开发效率。 各个模块..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-31T09:13:50.000Z"}],["meta",{"property":"article:author","content":"梁小道"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:published_time","content":"2024-05-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-31T09:13:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring基础\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-31T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-31T09:13:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"梁小道\\",\\"url\\":\\"https://lianyp.fun\\"}]}"]]},"headers":[{"level":2,"title":"什么是Spring框架？","slug":"什么是spring框架","link":"#什么是spring框架","children":[]},{"level":2,"title":"各个模块之间的依赖关系","slug":"各个模块之间的依赖关系","link":"#各个模块之间的依赖关系","children":[{"level":3,"title":"Core Container","slug":"core-container","link":"#core-container","children":[]},{"level":3,"title":"Aop","slug":"aop","link":"#aop","children":[]},{"level":3,"title":"Data Access/Integration","slug":"data-access-integration","link":"#data-access-integration","children":[]},{"level":3,"title":"Spring Web","slug":"spring-web","link":"#spring-web","children":[]},{"level":3,"title":"Message","slug":"message","link":"#message","children":[]},{"level":3,"title":"Spring Test","slug":"spring-test","link":"#spring-test","children":[]}]},{"level":2,"title":"Spring中用到的设计模式","slug":"spring中用到的设计模式","link":"#spring中用到的设计模式","children":[]},{"level":2,"title":"Spring中的事务管理","slug":"spring中的事务管理","link":"#spring中的事务管理","children":[{"level":3,"title":"Spring 管理事务的方式","slug":"spring-管理事务的方式","link":"#spring-管理事务的方式","children":[]},{"level":3,"title":"Spring 事务的传播行为","slug":"spring-事务的传播行为","link":"#spring-事务的传播行为","children":[]},{"level":3,"title":"Spring 事务的隔离级别","slug":"spring-事务的隔离级别","link":"#spring-事务的隔离级别","children":[]}]}],"git":{"createdTime":1717146830000,"updatedTime":1717146830000,"contributors":[{"name":"liangyp","email":"2267841523@qq.com","commits":1}]},"readingTime":{"minutes":4.08,"words":1225},"filePathRelative":"article/developer/backend/Spring-Basic.md","localizedDate":"2024年5月31日","excerpt":"<p>记得我刚刚学习Spring的时候，直接上来就是怎么安装使用，根本没有了解它是什么，为什么会有这个框架。</p>\\n<h2>什么是Spring框架？</h2>\\n<p>Spring是一款开源的Java开发框架，为了提高开发人员的开发效率（确实，跟病毒一样有传染性）。</p>\\n<p>它的核心就是IOC和AOP，另外还可以方便的完成数据库访问，第三方组件的集成。它的目标就是降低门槛，提高开发效率。</p>\\n<h2>各个模块之间的依赖关系</h2>\\n<p>Spring 各个模块的依赖关系</p>\\n<p>Core, Beans, Aop, Context, Tx, Jdbc, Support, Web, WebSocket, WebMvc, Orm, WebFlex, Aspects</p>","autoDesc":true}');export{h as comp,d as data};
