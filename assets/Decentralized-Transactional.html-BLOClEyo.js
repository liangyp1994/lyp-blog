import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as a,a as p}from"./app-Co8UXNfU.js";const n={},r=p('<h2 id="二阶段提交" tabindex="-1"><a class="header-anchor" href="#二阶段提交"><span>二阶段提交</span></a></h2><p>强一致性设计，引入了”事务协调者“协调管理各个本地事务的提交和回滚。两个阶段分别是 准备 和 提交 。</p><p>准备： 将提交事务之前的事情全部执行完成</p><p>提交：所有本地参与者都准备完成的话 协调者会向所有参与者发送提交事务的命令，然后等到所有事务都提交成功 才能说事务执行成功。</p><p>情况1：准备阶段失败-协调者会告知所有参与者进行回滚 分布式事务执行失败</p><p>情况2：第二阶段的提交如果是 ”回滚事务“ 那么需要不断重试 直到成功 不然在第一阶段准备成功的参与者都会一致阻塞。</p><p>情况3：第二阶段的提交如果是 ”提交事务“ 那么也是不断重试</p><p>可以看到进入第二阶段就没法返回了，只能往前冲</p><p>总结: 2PC是一种 尽量保证强一致性的分布式事务，因此它是同步阻塞的。既然是同步那么就会导致效率低下，并且存在单点故障，极端条件下还可能会数据不一致。</p><h2 id="三阶段提交" tabindex="-1"><a class="header-anchor" href="#三阶段提交"><span>三阶段提交</span></a></h2><p>从名字可以看出在二阶段上添加一个阶段，那么其实 3PC的出现就是解决 2PC的一些问题，例如 参与者中引入了超时机制，并且新增了一个阶段使得利用这个阶段去统一各自的状态。</p><p>不会再准备阶段就锁资源，减少了资源被锁的时间范围</p><p>预提交阶段可以看成一个节点，所有参与者只要到达该点就意味都准备好了并有响应</p><p>2PC中如果协调者一直不发送提交命令，参与者会一直阻塞，而3PC针对该问题引入了超时机制</p><p>超时机制：等待提交命令超时，参与者会提交事务，是走提交事务操作还是回滚操作不晓得</p>',15),o=[r];function i(c,l){return a(),t("div",null,o)}const m=e(n,[["render",i],["__file","Decentralized-Transactional.html.vue"]]),h=JSON.parse('{"path":"/article/developer/cloud/Decentralized-Transactional.html","title":"分布式事务解决方案","lang":"zh-CN","frontmatter":{"title":"分布式事务解决方案","date":"2024-05-31T00:00:00.000Z","categories":"微服务","tags":["Transaction"],"description":"二阶段提交 强一致性设计，引入了”事务协调者“协调管理各个本地事务的提交和回滚。两个阶段分别是 准备 和 提交 。 准备： 将提交事务之前的事情全部执行完成 提交：所有本地参与者都准备完成的话 协调者会向所有参与者发送提交事务的命令，然后等到所有事务都提交成功 才能说事务执行成功。 情况1：准备阶段失败-协调者会告知所有参与者进行回滚 分布式事务执行失...","head":[["meta",{"property":"og:url","content":"https://lianyp.fun/lyp-blog/article/developer/cloud/Decentralized-Transactional.html"}],["meta",{"property":"og:site_name","content":"小道空间-Vuepress开源轻博客系统"}],["meta",{"property":"og:title","content":"分布式事务解决方案"}],["meta",{"property":"og:description","content":"二阶段提交 强一致性设计，引入了”事务协调者“协调管理各个本地事务的提交和回滚。两个阶段分别是 准备 和 提交 。 准备： 将提交事务之前的事情全部执行完成 提交：所有本地参与者都准备完成的话 协调者会向所有参与者发送提交事务的命令，然后等到所有事务都提交成功 才能说事务执行成功。 情况1：准备阶段失败-协调者会告知所有参与者进行回滚 分布式事务执行失..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-31T09:13:50.000Z"}],["meta",{"property":"article:author","content":"梁小道"}],["meta",{"property":"article:tag","content":"Transaction"}],["meta",{"property":"article:published_time","content":"2024-05-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-31T09:13:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"分布式事务解决方案\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-31T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-31T09:13:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"梁小道\\",\\"url\\":\\"https://lianyp.fun\\"}]}"]]},"headers":[{"level":2,"title":"二阶段提交","slug":"二阶段提交","link":"#二阶段提交","children":[]},{"level":2,"title":"三阶段提交","slug":"三阶段提交","link":"#三阶段提交","children":[]}],"git":{"createdTime":1717146830000,"updatedTime":1717146830000,"contributors":[{"name":"liangyp","email":"2267841523@qq.com","commits":1}]},"readingTime":{"minutes":1.83,"words":550},"filePathRelative":"article/developer/cloud/Decentralized-Transactional.md","localizedDate":"2024年5月31日","excerpt":"<h2>二阶段提交</h2>\\n<p>强一致性设计，引入了”事务协调者“协调管理各个本地事务的提交和回滚。两个阶段分别是 准备 和 提交 。</p>\\n<p>准备： 将提交事务之前的事情全部执行完成</p>\\n<p>提交：所有本地参与者都准备完成的话 协调者会向所有参与者发送提交事务的命令，然后等到所有事务都提交成功 才能说事务执行成功。</p>\\n<p>情况1：准备阶段失败-协调者会告知所有参与者进行回滚 分布式事务执行失败</p>\\n<p>情况2：第二阶段的提交如果是 ”回滚事务“ 那么需要不断重试 直到成功 不然在第一阶段准备成功的参与者都会一致阻塞。</p>\\n<p>情况3：第二阶段的提交如果是 ”提交事务“ 那么也是不断重试</p>","autoDesc":true}');export{m as comp,h as data};
