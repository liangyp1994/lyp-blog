import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,o as t,a}from"./app-DQ7uMTFd.js";const n={},i=a('<p>Java中的IO（Input/Output）指的是用于读取和写入数据的机制。Java提供了丰富而灵活的IO API，用于与文件、网络和其他数据源进行交互。Java中的IO通常分为两种类型：字节流和字符流。</p><h2 id="字节流" tabindex="-1"><a class="header-anchor" href="#字节流"><span>字节流</span></a></h2><p>字节流以字节为单位进行处理，主要用于处理二进制数据（比如图片、视频等）。Java中常见的字节流类包括：</p><ul><li>InputStream：用于读取字节流的抽象类。</li><li>OutputStream：用于写入字节流的抽象类。</li><li>FileInputStream：用于从文件中读取字节流。</li><li>FileOutputStream：用于向文件写入字节流。</li></ul><p>在 Java 中，字节流主要用于处理二进制数据，即以字节为单位进行读取和写入。Java 中的字节流类位于 <code>java.io</code> 包中，常见的字节流类包括 InputStream、OutputStream 及它们的子类。</p><h3 id="inputstream-类及其子类" tabindex="-1"><a class="header-anchor" href="#inputstream-类及其子类"><span>InputStream 类及其子类</span></a></h3><ul><li><strong>InputStream</strong>：是所有字节输入流的抽象基类，定义了基本的读取字节的方法。</li><li><strong>FileInputStream</strong>：用于从文件中读取字节流。</li><li><strong>ByteArrayInputStream</strong>：用于从内存中的字节数组中读取数据。</li><li><strong>DataInputStream</strong>：可以按照基本数据类型来读取数据，例如按照 int、double、boolean 等类型读取数据。</li></ul><h3 id="outputstream-类及其子类" tabindex="-1"><a class="header-anchor" href="#outputstream-类及其子类"><span>OutputStream 类及其子类</span></a></h3><ul><li><strong>OutputStream</strong>：是所有字节输出流的抽象基类，定义了基本的写入字节的方法。</li><li><strong>FileOutputStream</strong>：用于向文件中写入字节流。</li><li><strong>ByteArrayOutputStream</strong>：向内存中的字节数组写入数据。</li><li><strong>DataOutputStream</strong>：可以按照基本数据类型来写入数据。</li></ul><h3 id="sequenceinputstream" tabindex="-1"><a class="header-anchor" href="#sequenceinputstream"><span>SequenceInputStream</span></a></h3><p><strong>SequenceInputStream</strong> 类可以把多个输入流串联在一起，顺序读取。</p><h3 id="randomaccessfile" tabindex="-1"><a class="header-anchor" href="#randomaccessfile"><span>RandomAccessFile</span></a></h3><p><strong>RandomAccessFile</strong> 类是一种特殊类型的文件流，既可以读取文件内容，也可以更新文件内容，它支持随机访问文件的内容。</p><p>字节流通常用于文件的读写和网络数据传输。在处理二进制数据时，字节流是非常有用的。但需要注意，字节流主要适用于处理字节数据，如果需要处理字符数据，则应使用字符流。</p><h2 id="字符流" tabindex="-1"><a class="header-anchor" href="#字符流"><span>字符流</span></a></h2><p>在 Java 中，字符流用于处理字符数据，是以字符为单位进行读取和写入的机制。字符流类位于 <code>java.io</code> 包中，常见的字符流类包括 Reader、Writer 及它们的子类。</p><ul><li>Reader：用于读取字符流的抽象类。</li><li>Writer：用于写入字符流的抽象类。</li><li>FileReader：用于从文件中读取字符流。</li><li>FileWriter：用于向文件写入字符流。</li></ul><h3 id="reader-类及其子类" tabindex="-1"><a class="header-anchor" href="#reader-类及其子类"><span>Reader 类及其子类</span></a></h3><ul><li><strong>Reader</strong>：是所有字符输入流的抽象基类，定义了基本的读取字符的方法。</li><li><strong>FileReader</strong>：用于从文件中读取字符流。</li><li><strong>CharArrayReader</strong>：用于从字符数组中读取数据。</li><li><strong>BufferedReader</strong>：带有缓冲区的字符输入流，能够提高读取效率。</li></ul><h3 id="writer-类及其子类" tabindex="-1"><a class="header-anchor" href="#writer-类及其子类"><span>Writer 类及其子类</span></a></h3><ul><li><strong>Writer</strong>：是所有字符输出流的抽象基类，定义了基本的写入字符的方法。</li><li><strong>FileWriter</strong>：用于向文件中写入字符流。</li><li><strong>CharArrayWriter</strong>：用于向字符数组中写入数据。</li><li><strong>BufferedWriter</strong>：带有缓冲区的字符输出流，能够提高写入效率。</li></ul><h3 id="inputstreamreader-和-outputstreamwriter" tabindex="-1"><a class="header-anchor" href="#inputstreamreader-和-outputstreamwriter"><span>InputStreamReader 和 OutputStreamWriter</span></a></h3><p><strong>InputStreamReader</strong> 和 <strong>OutputStreamWriter</strong> 类是字符流与字节流之间的桥梁，提供了将字节流转换为字符流的功能，支持指定字符集编码。</p><h3 id="chararrayreader-和-chararraywriter" tabindex="-1"><a class="header-anchor" href="#chararrayreader-和-chararraywriter"><span>CharArrayReader 和 CharArrayWriter</span></a></h3><p><strong>CharArrayReader</strong> 和 <strong>CharArrayWriter</strong> 类用于将数据读写到字符数组，并支持将字符数组中的数据读取和写入。</p><h3 id="stringwriter" tabindex="-1"><a class="header-anchor" href="#stringwriter"><span>StringWriter</span></a></h3><p><strong>StringWriter</strong> 类用于将字符数据写入到字符串中，常与 PrintWriter 配合使用。</p><blockquote><p>字符流通常适用于处理文本文件、网络数据传输等场景。要根据需要选择合适的字符流类来进行字符数据的读写操作。</p></blockquote><h2 id="缓冲流" tabindex="-1"><a class="header-anchor" href="#缓冲流"><span>缓冲流</span></a></h2><p>缓冲流（Buffered Stream）是对字节流和字符流的包装，提供了缓冲区功能，可以提高IO操作的性能。常见的缓冲流类包括：</p><ul><li>BufferedReader：读取字符流时提供缓冲功能。</li><li>BufferedWriter：写入字符流时提供缓冲功能。</li><li>BufferedInputStream：读取字节流时提供缓冲功能。</li><li>BufferedOutputStream：写入字节流时提供缓冲功能。</li></ul><h3 id="bufferedinputstream-和-bufferedoutputstream" tabindex="-1"><a class="header-anchor" href="#bufferedinputstream-和-bufferedoutputstream"><span>BufferedInputStream 和 BufferedOutputStream</span></a></h3><p>除了基本的输入输出流类外，Java 还提供了带有缓冲区的输入输出流类，它们分别是 <strong>BufferedInputStream</strong> 和 <strong>BufferedOutputStream</strong>。缓冲区类能够提高读写的效率，减少对底层资源的访问次数，适用于大量的数据读写操作。</p><h3 id="bufferedreader-和-bufferedwriter" tabindex="-1"><a class="header-anchor" href="#bufferedreader-和-bufferedwriter"><span>BufferedReader 和 BufferedWriter</span></a></h3><p>参考上面即可</p><h2 id="序列化" tabindex="-1"><a class="header-anchor" href="#序列化"><span>序列化</span></a></h2><p>Java提供了序列化机制（Serialization），可以将对象转换为字节流，以便在网络上传输或永久保存到文件中。实现序列化接口（Serializable）的对象可以被序列化。</p><h2 id="nio" tabindex="-1"><a class="header-anchor" href="#nio"><span>NIO</span></a></h2><p>Java的NIO（Non-blocking IO）提供了一种更为高效的IO模型，支持非阻塞式IO操作。主要包括通道（Channel）、缓冲区（Buffer）和选择器（Selector）等组件。</p><h3 id="缓冲区" tabindex="-1"><a class="header-anchor" href="#缓冲区"><span>缓冲区</span></a></h3><p>NIO中的所有I/O操作都是基于缓冲区的。缓冲区存储了数据，并提供了对数据的读写操作。NIO中主要有以下几种缓冲区类型：</p><p>ByteBuffer：用于处理字节数据 CharBuffer：用于处理字符数据 ShortBuffer、IntBuffer、LongBuffer：用于处理不同类型数据的缓冲区 DoubleBuffer、FloatBuffer：用于处理浮点型数据</p><h3 id="通道" tabindex="-1"><a class="header-anchor" href="#通道"><span>通道</span></a></h3><p>通道负责对缓冲区进行<strong>读写操作</strong>。通道可以直接连接到文件、网络套接字等，是双向的，可以进行读取和写入操作。常用的通道类型包括：</p><p>FileChannel：用于文件操作 SocketChannel：用于网络Socket的读写 ServerSocketChannel：用于监听网络连接的接口 DatagramChannel：用于UDP协议的数据读写</p><h3 id="选择器" tabindex="-1"><a class="header-anchor" href="#选择器"><span>选择器</span></a></h3><p>Selector可以同时<strong>监控</strong>多个通道的事件，当一个通道有数据可读或可写时，Selector会将该事件通知给应用程序，减少了线程数目，提高了系统性能。</p><blockquote><p>通过通道和缓冲区进行读写操作，可以实现高性能的I/O处理。应用程序将数据写入缓冲区，再从缓冲区写入到通道；同样，也可以将数据从通道读入到缓冲区。</p></blockquote><h3 id="nio场景" tabindex="-1"><a class="header-anchor" href="#nio场景"><span>NIO场景</span></a></h3><p>NIO主要适用于需要处理大量连接，并且要求低延迟和高性能的应用场景，比如网络编程、服务器编程等。相比传统的I/O框架，NIO提供了更多的功能和更灵活的方式来进行I/O操作。</p><h2 id="文件操作" tabindex="-1"><a class="header-anchor" href="#文件操作"><span>文件操作</span></a></h2><p>Java的IO API提供了各种操作文件的方法，包括创建文件、删除文件、重命名文件、读取文件内容、写入文件内容等。</p><h2 id="网络io" tabindex="-1"><a class="header-anchor" href="#网络io"><span>网络IO</span></a></h2><p>Java的网络IO模块提供了Socket和ServerSocket等类，用于实现网络通信，支持TCP和UDP协议。</p><p>Java的IO API非常强大且灵活，可以满足各种IO需求。合理选择合适的IO类和方法可以提高程序执行的效率和性能。对于需要处理大量数据或对IO性能要求较高的场景，建议使用NIO模块。</p>',55),l=[i];function s(p,u){return t(),r("div",null,l)}const h=e(n,[["render",s],["__file","Hello-IO.html.vue"]]),c=JSON.parse('{"path":"/java/Java-Guide/Hello-IO.html","title":"Java中的IO","lang":"zh-CN","frontmatter":{"title":"Java中的IO","article":false,"order":7,"description":"Java中的IO（Input/Output）指的是用于读取和写入数据的机制。Java提供了丰富而灵活的IO API，用于与文件、网络和其他数据源进行交互。","head":[["meta",{"property":"og:url","content":"https://lianyp.fun/java/Java-Guide/Hello-IO.html"}],["meta",{"property":"og:site_name","content":"小道空间-Vuepress开源轻博客系统"}],["meta",{"property":"og:title","content":"Java中的IO"}],["meta",{"property":"og:description","content":"Java中的IO（Input/Output）指的是用于读取和写入数据的机制。Java提供了丰富而灵活的IO API，用于与文件、网络和其他数据源进行交互。"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-25T01:28:19.000Z"}],["meta",{"property":"article:author","content":"梁小道"}],["meta",{"property":"article:modified_time","content":"2024-05-25T01:28:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Java中的IO\\",\\"description\\":\\"Java中的IO（Input/Output）指的是用于读取和写入数据的机制。Java提供了丰富而灵活的IO API，用于与文件、网络和其他数据源进行交互。\\"}"]]},"headers":[{"level":2,"title":"字节流","slug":"字节流","link":"#字节流","children":[{"level":3,"title":"InputStream 类及其子类","slug":"inputstream-类及其子类","link":"#inputstream-类及其子类","children":[]},{"level":3,"title":"OutputStream 类及其子类","slug":"outputstream-类及其子类","link":"#outputstream-类及其子类","children":[]},{"level":3,"title":"SequenceInputStream","slug":"sequenceinputstream","link":"#sequenceinputstream","children":[]},{"level":3,"title":"RandomAccessFile","slug":"randomaccessfile","link":"#randomaccessfile","children":[]}]},{"level":2,"title":"字符流","slug":"字符流","link":"#字符流","children":[{"level":3,"title":"Reader 类及其子类","slug":"reader-类及其子类","link":"#reader-类及其子类","children":[]},{"level":3,"title":"Writer 类及其子类","slug":"writer-类及其子类","link":"#writer-类及其子类","children":[]},{"level":3,"title":"InputStreamReader 和 OutputStreamWriter","slug":"inputstreamreader-和-outputstreamwriter","link":"#inputstreamreader-和-outputstreamwriter","children":[]},{"level":3,"title":"CharArrayReader 和 CharArrayWriter","slug":"chararrayreader-和-chararraywriter","link":"#chararrayreader-和-chararraywriter","children":[]},{"level":3,"title":"StringWriter","slug":"stringwriter","link":"#stringwriter","children":[]}]},{"level":2,"title":"缓冲流","slug":"缓冲流","link":"#缓冲流","children":[{"level":3,"title":"BufferedInputStream 和 BufferedOutputStream","slug":"bufferedinputstream-和-bufferedoutputstream","link":"#bufferedinputstream-和-bufferedoutputstream","children":[]},{"level":3,"title":"BufferedReader 和 BufferedWriter","slug":"bufferedreader-和-bufferedwriter","link":"#bufferedreader-和-bufferedwriter","children":[]}]},{"level":2,"title":"序列化","slug":"序列化","link":"#序列化","children":[]},{"level":2,"title":"NIO","slug":"nio","link":"#nio","children":[{"level":3,"title":"缓冲区","slug":"缓冲区","link":"#缓冲区","children":[]},{"level":3,"title":"通道","slug":"通道","link":"#通道","children":[]},{"level":3,"title":"选择器","slug":"选择器","link":"#选择器","children":[]},{"level":3,"title":"NIO场景","slug":"nio场景","link":"#nio场景","children":[]}]},{"level":2,"title":"文件操作","slug":"文件操作","link":"#文件操作","children":[]},{"level":2,"title":"网络IO","slug":"网络io","link":"#网络io","children":[]}],"git":{"createdTime":1716535397000,"updatedTime":1716600499000,"contributors":[{"name":"liangyp","email":"2267841523@qq.com","commits":2}]},"readingTime":{"minutes":6.13,"words":1839},"filePathRelative":"java/Java-Guide/Hello-IO.md","localizedDate":"2024年5月24日","excerpt":"<p>Java中的IO（Input/Output）指的是用于读取和写入数据的机制。Java提供了丰富而灵活的IO API，用于与文件、网络和其他数据源进行交互。Java中的IO通常分为两种类型：字节流和字符流。</p>\\n<h2>字节流</h2>\\n<p>字节流以字节为单位进行处理，主要用于处理二进制数据（比如图片、视频等）。Java中常见的字节流类包括：</p>\\n<ul>\\n<li>InputStream：用于读取字节流的抽象类。</li>\\n<li>OutputStream：用于写入字节流的抽象类。</li>\\n<li>FileInputStream：用于从文件中读取字节流。</li>\\n<li>FileOutputStream：用于向文件写入字节流。</li>\\n</ul>"}');export{h as comp,c as data};
