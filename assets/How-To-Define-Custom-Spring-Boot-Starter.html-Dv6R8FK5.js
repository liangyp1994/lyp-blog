import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-BEhkVDlh.js";const e={},p=t(`<h2 id="starter可以用来做什么" tabindex="-1"><a class="header-anchor" href="#starter可以用来做什么"><span>Starter可以用来做什么？</span></a></h2><p>当你每次创建一个新项目是不是都需要引入譬如 web jdbc aop test 这些基础依赖，我们可以用Starter将这些依赖集成在一起。组件化思想</p><h2 id="starter包含什么" tabindex="-1"><a class="header-anchor" href="#starter包含什么"><span>Starter包含什么？</span></a></h2><p>一个典型的Spring Boot starter包含自动配置和定制特定技术的基础设施的代码，我们称之为 &quot;acme&quot;。</p><ul><li>自动配置</li><li>专业基础模块（一个或多个）</li></ul><h2 id="开始设计" tabindex="-1"><a class="header-anchor" href="#开始设计"><span>开始设计</span></a></h2><p>自定义名称，需要有一个名字用来范围约束，这里以 lyp 作为名字。最好起一个比较有辨识度的名字，不怎么容易与别人冲突</p><p>配置项：以 lyp开头，避免与其他冲突</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">&quot;lyp&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LypProperties</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * Whether to check the location of acme resources.
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> checkLocation <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Timeout for establishing a connection to the acme server.
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Duration</span> loginTimeout <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isCheckLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>checkLocation<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCheckLocation</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> checkLocation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>checkLocation <span class="token operator">=</span> checkLocation<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Duration</span> <span class="token function">getLoginTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>loginTimeout<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLoginTimeout</span><span class="token punctuation">(</span><span class="token class-name">Duration</span> loginTimeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>loginTimeout <span class="token operator">=</span> loginTimeout<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="添加依赖" tabindex="-1"><a class="header-anchor" href="#添加依赖"><span>添加依赖</span></a></h2><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-autoconfigure-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用依赖" tabindex="-1"><a class="header-anchor" href="#使用依赖"><span>使用依赖</span></a></h2><p>在resource下创建 META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</p><p>放入我们的自动配置类</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token doc-comment comment">/**

- @author : liangyp
- @since 2023/11/14 15:42
 */</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">LypProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LypAutoConfiguration</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内部内容自定。</p>`,16),o=[p];function i(c,l){return s(),a("div",null,o)}const d=n(e,[["render",i],["__file","How-To-Define-Custom-Spring-Boot-Starter.html.vue"]]),k=JSON.parse('{"path":"/article/developer/backend/How-To-Define-Custom-Spring-Boot-Starter.html","title":"如何自定义Spring Starter","lang":"zh-CN","frontmatter":{"title":"如何自定义Spring Starter","date":"2024-05-31T00:00:00.000Z","categories":"后端","tags":["SpringBoot"],"description":"Starter可以用来做什么？ 当你每次创建一个新项目是不是都需要引入譬如 web jdbc aop test 这些基础依赖，我们可以用Starter将这些依赖集成在一起。组件化思想 Starter包含什么？ 一个典型的Spring Boot starter包含自动配置和定制特定技术的基础设施的代码，我们称之为 \\"acme\\"。 自动配置 专业基础模块（...","head":[["meta",{"property":"og:url","content":"https://lianyp.fun/lyp-blog/article/developer/backend/How-To-Define-Custom-Spring-Boot-Starter.html"}],["meta",{"property":"og:site_name","content":"小道空间-Vuepress开源轻博客系统"}],["meta",{"property":"og:title","content":"如何自定义Spring Starter"}],["meta",{"property":"og:description","content":"Starter可以用来做什么？ 当你每次创建一个新项目是不是都需要引入譬如 web jdbc aop test 这些基础依赖，我们可以用Starter将这些依赖集成在一起。组件化思想 Starter包含什么？ 一个典型的Spring Boot starter包含自动配置和定制特定技术的基础设施的代码，我们称之为 \\"acme\\"。 自动配置 专业基础模块（..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-31T09:13:50.000Z"}],["meta",{"property":"article:author","content":"梁小道"}],["meta",{"property":"article:tag","content":"SpringBoot"}],["meta",{"property":"article:published_time","content":"2024-05-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-31T09:13:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何自定义Spring Starter\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-31T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-31T09:13:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"梁小道\\",\\"url\\":\\"https://lianyp.fun\\"}]}"]]},"headers":[{"level":2,"title":"Starter可以用来做什么？","slug":"starter可以用来做什么","link":"#starter可以用来做什么","children":[]},{"level":2,"title":"Starter包含什么？","slug":"starter包含什么","link":"#starter包含什么","children":[]},{"level":2,"title":"开始设计","slug":"开始设计","link":"#开始设计","children":[]},{"level":2,"title":"添加依赖","slug":"添加依赖","link":"#添加依赖","children":[]},{"level":2,"title":"使用依赖","slug":"使用依赖","link":"#使用依赖","children":[]}],"git":{"createdTime":1717146830000,"updatedTime":1717146830000,"contributors":[{"name":"liangyp","email":"2267841523@qq.com","commits":1}]},"readingTime":{"minutes":1.1,"words":330},"filePathRelative":"article/developer/backend/How-To-Define-Custom-Spring-Boot-Starter.md","localizedDate":"2024年5月31日","excerpt":"<h2>Starter可以用来做什么？</h2>\\n<p>当你每次创建一个新项目是不是都需要引入譬如 web jdbc aop test 这些基础依赖，我们可以用Starter将这些依赖集成在一起。组件化思想</p>\\n<h2>Starter包含什么？</h2>\\n<p>一个典型的Spring Boot starter包含自动配置和定制特定技术的基础设施的代码，我们称之为 \\"acme\\"。</p>\\n<ul>\\n<li>自动配置</li>\\n<li>专业基础模块（一个或多个）</li>\\n</ul>\\n<h2>开始设计</h2>\\n<p>自定义名称，需要有一个名字用来范围约束，这里以 lyp 作为名字。最好起一个比较有辨识度的名字，不怎么容易与别人冲突</p>","autoDesc":true}');export{d as comp,k as data};
