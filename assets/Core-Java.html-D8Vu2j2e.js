import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as s,a as t}from"./app-D2OO_ZoN.js";const e={},p=t(`<h2 id="变量和数据类型" tabindex="-1"><a class="header-anchor" href="#变量和数据类型"><span>变量和数据类型</span></a></h2><blockquote><p>Java 是一种静态类型语言，需要在使用变量之前声明其数据类型。 常见的数据类型包括整型（int, long）、浮点型（float, double）、字符型（char）、布尔型（boolean）等。 变量必须先声明后使用，可以在声明时初始化，也可以单独初始化。</p></blockquote><p>下面详细讲解一下 Java 中的变量和数据类型：</p><h3 id="变量" tabindex="-1"><a class="header-anchor" href="#变量"><span>变量</span></a></h3><ul><li><strong>变量</strong>：在程序中用来存储数据的内存空间的名称，就是一种标识符，用来标识存储的值。</li><li><strong>声明变量</strong>：在 Java 中声明变量需指定变量的数据类型和变量名，如 <code>int age;</code>。</li><li><strong>初始化变量</strong>：变量声明后需要赋初值才能使用，如 <code>int age = 25;</code>。</li><li><strong>赋值操作</strong>：使用 <code>=</code> 运算符给变量赋值，如 <code>age = 30;</code>。</li><li><strong>变量名规则</strong>：变量名必须是合法的标识符，由字母、数字、下划线和美元符组成，不能以数字开头。</li></ul><h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h3><p>Java 中的数据类型分为两大类：基本数据类型（Primitive Data Types）和引用数据类型（Reference Data Types）。</p><h4 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型"><span>基本数据类型</span></a></h4><p>Java 的基本数据类型分为以下几种：</p><ol><li><p><strong>整型</strong>：用于存储整数类型的数据。包括 byte、short、int、long。</p><ul><li><code>byte</code>：1 字节，-128 到 127。</li><li><code>short</code>：2 字节，-32768 到 32767。</li><li><code>int</code>：4 字节，-2^31 到 2^31-1。</li><li><code>long</code>：8 字节，-2^63 到 2^63-1。</li></ul></li><li><p><strong>浮点型</strong>：用于存储浮点数，包括 float 和 double。</p><ul><li><code>float</code>：4 字节，有效位数约 6-7 位。</li><li><code>double</code>：8 字节，有效位数约 15 位。</li></ul></li><li><p><strong>字符型</strong>：用于存储单个字符，char 类型占用 2 字节，通常用单引号表示，如 <code>&#39;A&#39;</code>。</p></li><li><p><strong>布尔型</strong>：用于表示逻辑值，只有两个取值：true 和 false，主要用于逻辑判断。</p></li></ol><h4 id="引用数据类型" tabindex="-1"><a class="header-anchor" href="#引用数据类型"><span>引用数据类型</span></a></h4><p>Java 中的引用数据类型包括类、接口、数组等，在声明变量时实际上存储的是对象的引用，而不是对象本身。</p><h4 id="数据类型转换" tabindex="-1"><a class="header-anchor" href="#数据类型转换"><span>数据类型转换</span></a></h4><p>Java 中的数据类型转换分为自动类型转换和强制类型转换。自动类型转换是指将一个小范围的数据类型转换为大范围的数据类型，如将 int 转换为 double；强制类型转换则是将一个大范围的数据类型转换为小范围的数据类型，需要显示地进行转换操作。</p><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h2><blockquote><p>Java 支持常见的算术运算符（+、-、*、/）以及逻辑运算符（&amp;&amp;、||、！）等。 注意运算符的优先级和结合性，可以通过括号来改变运算次序。</p></blockquote><p>以下是一些常见的 Java 运算符及其详细描述：</p><h3 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符"><span>算术运算符</span></a></h3><ul><li><strong>+</strong>：相加</li><li><strong>-</strong>：相减</li><li><strong>*</strong>：相乘</li><li><strong>/</strong>：相除</li><li><strong>%</strong>：求余（取模）</li></ul><h3 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符"><span>关系运算符</span></a></h3><ul><li><strong>==</strong>：检查两个操作数是否相等</li><li><strong>!=</strong>：检查两个操作数是否不相等</li><li><strong>&gt;</strong>：检查左操作数是否大于右操作数</li><li><strong>&lt;</strong>：检查左操作数是否小于右操作数</li><li><strong>&gt;=</strong>：检查左操作数是否大于或等于右操作数</li><li><strong>&lt;=</strong>：检查左操作数是否小于或等于右操作数</li></ul><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h3><ul><li><strong>&amp;&amp;</strong>：逻辑与</li><li><strong>||</strong>：逻辑或</li><li><strong>!</strong>：逻辑非</li></ul><h3 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符"><span>位运算符</span></a></h3><ul><li><strong>&amp;</strong>：按位与</li><li><strong>|</strong>：按位或</li><li><strong>^</strong>：按位异或（相同则为0，不同则为1）</li><li><strong>~</strong>：按位取反（一元操作符，翻转操作数的位）</li></ul><h3 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符"><span>赋值运算符</span></a></h3><ul><li><strong>=</strong>：赋值运算符</li><li><strong>+=, -=, *=, /=, %=</strong>：复合赋值运算符，例如 <code>a += 5</code> 相当于 <code>a = a + 5</code></li></ul><h3 id="其他运算符" tabindex="-1"><a class="header-anchor" href="#其他运算符"><span>其他运算符</span></a></h3><ul><li><strong>?:</strong>：条件运算符，也称为三元运算符</li><li><strong>instanceof</strong>：用于在运行时确定对象是否是特定类的一个实例或子类的实例</li></ul><h3 id="优先级和结合性" tabindex="-1"><a class="header-anchor" href="#优先级和结合性"><span>优先级和结合性</span></a></h3><p>运算符拥有优先级和结合性，它们决定了表达式中运算的顺序。拥有较高优先级的运算符首先执行。当优先级相同时，结合性用于确定左关联性还是右关联性。例如，<code>*</code> 拥有高于 <code>+</code> 的优先级，所以 <code>2 * 3 + 4</code> 将先执行乘法，再执行加法。</p><p>示例代码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OperatorExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 算术运算符示例</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Arithmetic Operators:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a + b = &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a - b = &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a * b = &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;b / a = &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>b <span class="token operator">/</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;b % a = &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>b <span class="token operator">%</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 赋值运算符示例</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\nAssignment Operators:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        a <span class="token operator">+=</span> b<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a += b: &quot;</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        a <span class="token operator">-=</span> b<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a -= b: &quot;</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        a <span class="token operator">*=</span> b<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a *= b: &quot;</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        a <span class="token operator">/=</span> b<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a /= b: &quot;</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        a <span class="token operator">%=</span> b<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a %= b: &quot;</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 比较运算符示例</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\nComparison Operators:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a == b: &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a != b: &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a &gt; b: &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a &lt; b: &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;b &gt;= a: &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;=</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;b &lt;= a: &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;=</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 逻辑运算符示例</span>
        <span class="token keyword">boolean</span> x <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> y <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;\\nLogical Operators:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;x &amp;&amp; y: &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">&amp;&amp;</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;x || y: &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>x <span class="token operator">||</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;!x: &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">!</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="控制流" tabindex="-1"><a class="header-anchor" href="#控制流"><span>控制流</span></a></h2><blockquote><p>Java 支持条件语句（if-else、switch）、循环语句（for、while、do-while）、以及跳转语句（break、continue、return）等。 熟练运用这些控制流语句可以实现不同的逻辑控制。</p></blockquote><p>控制流主要包括顺序结构、选择结构和循环结构。</p><h3 id="顺序结构" tabindex="-1"><a class="header-anchor" href="#顺序结构"><span>顺序结构</span></a></h3><p>顺序结构是程序中最基本的控制流结构，指的是代码按照书写的顺序依次执行。在Java中，代码默认按照这样的顺序执行。例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;The sum of a and b is: &quot;</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="选择结构" tabindex="-1"><a class="header-anchor" href="#选择结构"><span>选择结构</span></a></h3><p>选择结构用于在程序中根据不同条件执行不同的代码块。在Java中，常见的选择结构包括if-else语句和switch语句。</p><ul><li>if-else语句：</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;x is greater than 5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;x is less than or equal to 5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>switch语句：</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> day <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Monday&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Tuesday&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token comment">// ... 更多case</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid day&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="循环结构" tabindex="-1"><a class="header-anchor" href="#循环结构"><span>循环结构</span></a></h3><p>循环结构用于重复执行代码块，直到某个条件不再满足为止。在Java中，主要有for循环、while循环和do-while循环。</p><ul><li>for循环：</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;This is iteration &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>while循环：</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;This is iteration &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>do-while循环：</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">do</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;This is iteration &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="跳转结构" tabindex="-1"><a class="header-anchor" href="#跳转结构"><span>跳转结构</span></a></h3><p>跳转结构用于改变程序的正常执行顺序。Java中的跳转结构包括break、continue和return。</p><ul><li>break语句：在循环或switch语句中终止执行，并跳出当前代码块。</li><li>continue语句：在循环中跳过当前迭代，继续下一次迭代。</li><li>return语句：从方法中返回值并终止方法的执行。</li></ul><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h2><blockquote><p>Java 中的数组是一种<strong>引用类型</strong>，需要使用 new 关键字来创建。 数组的<strong>长度是固定的</strong>，可以通过索引来访问数组元素。</p></blockquote><p>在Java中，数组是一种用来存储<strong>相同类型元素</strong>的数据结构。数组允许程序员在一个变量中存储多个相同类型的元素，通过索引可以访问和操作数组中的元素。下面是关于Java数组的详细讲解：</p><h3 id="声明数组" tabindex="-1"><a class="header-anchor" href="#声明数组"><span>声明数组</span></a></h3><p>在Java中，数组的声明方式为指定元素类型和数组名，例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">;</span> <span class="token comment">// 声明int类型的数组</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names<span class="token punctuation">;</span> <span class="token comment">// 声明String类型的数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建数组" tabindex="-1"><a class="header-anchor" href="#创建数组"><span>创建数组</span></a></h3><p>在声明数组后，需要为数组分配内存空间。可以使用new关键字来创建数组，指定数组的大小，例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个包含5个元素的整型数组</span>
names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个包含3个元素的字符串数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以在声明的同时完成数组的创建：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 声明并创建包含5个元素的整型数组</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 声明并创建包含3个元素的字符串数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="初始化数组" tabindex="-1"><a class="header-anchor" href="#初始化数组"><span>初始化数组</span></a></h3><p>数组的元素可以在创建后进行初始化，可以通过索引来访问和修改数组中的元素。例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 设置数组numbers的第一个元素为10</span>
names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 设置数组names的第二个元素为&quot;John&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组的长度" tabindex="-1"><a class="header-anchor" href="#数组的长度"><span>数组的长度</span></a></h3><p>可以使用数组的length属性获取数组的长度，例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> size <span class="token operator">=</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 获取数组numbers的长度</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="遍历数组" tabindex="-1"><a class="header-anchor" href="#遍历数组"><span>遍历数组</span></a></h3><p>可以使用for循环或者增强for循环遍历数组中的元素，例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 遍历输出数组numbers中的元素</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 遍历输出数组names中的元素</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="多维数组" tabindex="-1"><a class="header-anchor" href="#多维数组"><span>多维数组</span></a></h3><p>除了一维数组，Java还支持多维数组，例如二维数组：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个3行3列的二维数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="数组的缺点" tabindex="-1"><a class="header-anchor" href="#数组的缺点"><span>数组的缺点</span></a></h3><p>在 Java 中，数组的大小是固定的，一旦初始化长度后不能改变。同时，数组也没有提供一些高级的操作方法，例如添加或删除元素。为了解决这些问题，Java 中提供了集合（Collection）框架来代替数组，例如 ArrayList、LinkedList 等。</p><h2 id="类和对象" tabindex="-1"><a class="header-anchor" href="#类和对象"><span>类和对象</span></a></h2><blockquote><p>Java 是一种面向对象的编程语言，基本的程序结构是类和对象。 类是对象的模板，对象是类的实例。 类包括属性（成员变量）和方法（成员函数）两部分。</p></blockquote><p>在Java中，类和对象是面向对象编程的核心概念。下面是关于Java类和对象的详细讲解：</p><h3 id="类的定义" tabindex="-1"><a class="header-anchor" href="#类的定义"><span>类的定义</span></a></h3><p>在Java中，可以使用关键字 &quot;class&quot; 来定义类。类包括数据成员和方法成员，用来描述对象的属性和行为。例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
    <span class="token comment">// 数据成员</span>
    <span class="token class-name">String</span> brand<span class="token punctuation">;</span>
    <span class="token keyword">int</span> year<span class="token punctuation">;</span>

    <span class="token comment">// 方法成员</span>
    <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;The car is starting&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对象的创建" tabindex="-1"><a class="header-anchor" href="#对象的创建"><span>对象的创建</span></a></h3><p>类是对象的模板，在程序中需要创建对象来使用类所描述的属性和行为。可以使用关键字 &quot;new&quot; 来创建对象，例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Car</span> myCar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建Car类的对象myCar</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="对象的访问" tabindex="-1"><a class="header-anchor" href="#对象的访问"><span>对象的访问</span></a></h3><p>创建对象后，可以使用点号(.)来访问对象的属性和方法，例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>myCar<span class="token punctuation">.</span>brand <span class="token operator">=</span> <span class="token string">&quot;Toyota&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 设置myCar对象的品牌为Toyota</span>
myCar<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用myCar对象的start方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="类的构造方法" tabindex="-1"><a class="header-anchor" href="#类的构造方法"><span>类的构造方法</span></a></h3><p>构造方法用于在创建对象时初始化对象的属性。构造方法与类同名，没有返回类型，并且在使用关键字 &quot;new&quot; 创建对象时自动调用。例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> brand<span class="token punctuation">;</span>
    <span class="token keyword">int</span> year<span class="token punctuation">;</span>

    <span class="token comment">// 构造方法</span>
    <span class="token keyword">public</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">,</span> <span class="token keyword">int</span> year<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建对象时调用构造方法</span>
<span class="token class-name">Car</span> myCar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">&quot;Toyota&quot;</span><span class="token punctuation">,</span> <span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h2><blockquote><p>Java 中的方法是一段完成特定任务的代码块。 可以定义方法来执行特定的功能，并可以通过调用方法来复用代码。</p></blockquote><p>在 Java 编程语言中，方法通常用于在程序中组织和重用代码，使程序更加模块化并提高代码的可维护性。以下是 Java 中方法的一些详细讲解：</p><h3 id="方法的定义" tabindex="-1"><a class="header-anchor" href="#方法的定义"><span>方法的定义</span></a></h3><p>在 Java 中，方法的定义通常包括以下部分：</p><ul><li><p>访问修饰符：表示谁可以调用该方法，如 public、protected、private 或默认(package-private)。</p></li><li><p>返回类型：方法执行完毕后返回的数据类型，如果不返回任何值则使用关键字 void。</p></li><li><p>方法名：方法的名称，用于调用该方法。</p></li><li><p>参数列表：传递给方法的输入值，可以是零个或多个参数。</p></li><li><p>方法体：包含了方法的实际代码。</p><p>例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> sum <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="方法的调用" tabindex="-1"><a class="header-anchor" href="#方法的调用"><span>方法的调用</span></a></h3><p>可以通过在其他代码中使用方法名以及传递相应的参数来调用方法。例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用 add 方法，并将返回值赋给 result</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="方法的重载" tabindex="-1"><a class="header-anchor" href="#方法的重载"><span>方法的重载</span></a></h3><p>在 Java 中，方法允许具有相同的名称，但是参数列表不同的多个版本。这被称为方法重载。重载的方法应该有不同的参数类型、参数个数或参数顺序，但不能仅仅通过返回类型的不同来区分。</p><h3 id="方法的重写" tabindex="-1"><a class="header-anchor" href="#方法的重写"><span>方法的重写</span></a></h3><p>当子类继承自父类并在子类中重新定义父类中已有的方法时，称之为方法的重写。重写的方法具有相同的名称、参数列表和返回类型。在运行时，实际上会根据对象的具体类型来调用相应的方法，这被称为运行时多态。</p><h3 id="方法的访问修饰符" tabindex="-1"><a class="header-anchor" href="#方法的访问修饰符"><span>方法的访问修饰符</span></a></h3><p>Java 支持多种访问修饰符，用于控制方法的访问权限。常见的访问修饰符包括 public（公共）、protected（受保护的）、private（私有的）和默认的（包内可见）。</p><h2 id="包和导入" tabindex="-1"><a class="header-anchor" href="#包和导入"><span>包和导入</span></a></h2><blockquote><p>在 Java 中，包（package）是一种用于组织和管理类和接口的文件结构。它允许开发者将相关的类和接口放在一起，并提供了一种命名空间来避免类名和接口名的冲突。Java 的包机制还允许在项目中创建层次化的类库，便于管理和维护。</p></blockquote><h3 id="包的定义" tabindex="-1"><a class="header-anchor" href="#包的定义"><span>包的定义</span></a></h3><p>包的定义通常放在源文件的最顶部，使用 <code>package</code> 关键字加上包名，如下所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>myapp</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在这个例子中，<code>com.example.myapp</code> 就是包名。</p><h3 id="包的组织结构" tabindex="-1"><a class="header-anchor" href="#包的组织结构"><span>包的组织结构</span></a></h3><p>包的组织结构与文件系统的目录结构相对应。例如，包名为 <code>com.example.myapp</code> 的类文件应该位于名为 <code>com/example/myapp</code> 的目录中。</p><h3 id="导入" tabindex="-1"><a class="header-anchor" href="#导入"><span>导入</span></a></h3><p>在实际的开发中，我们通常会使用其他包中的类和接口。此时，可以使用 <code>import</code> 关键字来导入特定的包、类或接口，从而在源代码中使用它们。</p><h3 id="显示导入" tabindex="-1"><a class="header-anchor" href="#显示导入"><span>显示导入</span></a></h3><p>使用 import 可以显式导入单个类或者整个包中的所有类，如下所示：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span> <span class="token comment">// 导入 java.util 包中的 ArrayList 类</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span> <span class="token comment">// 导入 java.util 包中的所有类</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="静态导入" tabindex="-1"><a class="header-anchor" href="#静态导入"><span>静态导入</span></a></h3><p>Java 还支持静态导入，通过它可以导入包中的静态成员，使用起来更加方便。例如：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span> <span class="token comment">// 导入 java.lang.Math 包中的所有静态成员</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="使用包和导入的优势" tabindex="-1"><a class="header-anchor" href="#使用包和导入的优势"><span>使用包和导入的优势</span></a></h3><ul><li>包可以帮助我们组织和管理大量的类和接口。</li><li>包提供了一种命名空间，防止类和接口之间的名称冲突。</li><li>导入让我们可以在代码中轻松地使用其他包中的类和接口而不必使用完整的类名。</li></ul><h2 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理"><span>异常处理</span></a></h2><blockquote><p>Java 中的异常处理是通过 try-catch-finally 块来实现的。 可以捕获并处理程序运行时可能出现的异常，保证程序的稳定性。 在Java中，异常处理是一种机制，用于处理程序执行过程中可能出现的错误、异常情况或意外情况。异常处理的目的是保障程序的稳定运行，以及提供更好的错误信息和用户体验。下面是Java中异常处理的基本知识：</p></blockquote><h3 id="异常的分类" tabindex="-1"><a class="header-anchor" href="#异常的分类"><span>异常的分类</span></a></h3><p>Java中的异常分为两种：Checked Exception（受检异常）和 Unchecked Exception（非受检异常）。</p><ul><li>Checked Exception 需要在代码中显式地处理或抛出，例如 IOException、SQLException等。</li><li>Unchecked Exception 则是RuntimeException的子类，通常是由编程错误导致的异常，不需要强制处理，例如 NullPointerException、ArrayIndexOutOfBoundsException等。</li></ul><blockquote><p>前者在编码过程中IDE就会通过红色波浪线提示，能当即处理，而后者才是程序员经常头疼的，因为没有提示，可能编译或运行过程各种才能发现。</p></blockquote><h3 id="异常处理的关键字" tabindex="-1"><a class="header-anchor" href="#异常处理的关键字"><span>异常处理的关键字</span></a></h3><p>Java中的异常处理主要使用以下关键字和结构：</p><ul><li>try：用于包裹可能会抛出异常的代码块。</li><li>catch：用于捕获并处理try块中抛出的异常。</li><li>finally：用于定义无论是否发生异常都需要执行的代码块。</li><li>throw：用于手动抛出异常。</li><li>throws：用于在方法签名中声明可能抛出的Checked Exception。</li></ul><h3 id="try-catch-finally-结构" tabindex="-1"><a class="header-anchor" href="#try-catch-finally-结构"><span>try-catch-finally 结构</span></a></h3><p>在Java中，使用try-catch-finally结构来处理异常。示例代码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 可能会抛出异常的代码</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExceptionType1</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理ExceptionType1类型的异常</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExceptionType2</span> e2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理ExceptionType2类型的异常</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token comment">// 无论是否发生异常都会执行的代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="异常的处理与抛出" tabindex="-1"><a class="header-anchor" href="#异常的处理与抛出"><span>异常的处理与抛出</span></a></h3><p>在方法中可以使用throws关键字声明可能会抛出的Checked Exception，也可以使用throw关键字手动抛出异常。示例代码如下：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>someCondition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">&quot;An IO error occurred&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>一个<code>s</code>,意义相差甚远</p></blockquote><h3 id="自定义异常" tabindex="-1"><a class="header-anchor" href="#自定义异常"><span>自定义异常</span></a></h3><p>Java也支持自定义异常，通过继承Exception或其子类来创建自定义异常类。</p><blockquote><p>通常我们项目中会集成 RuntimeException 从而达到业务异常的记录</p></blockquote><h3 id="常用的异常类" tabindex="-1"><a class="header-anchor" href="#常用的异常类"><span>常用的异常类</span></a></h3><p>Java提供了许多内置的异常类，例如NullPointerException、ArrayIndexOutOfBoundsException、IOException等，这些异常类用于表示各种可能发生的异常情况。</p>`,150),o=[p];function l(c,i){return s(),a("div",null,o)}const d=n(e,[["render",l],["__file","Core-Java.html.vue"]]),k=JSON.parse('{"path":"/java/Java-Guide/Core-Java.html","title":"Java基础语法","lang":"zh-CN","frontmatter":{"title":"Java基础语法","article":false,"order":1,"description":"代码尽头皆为空,学无止境乃微风。编程途中诡辩多,唯有小道可成功。","head":[["meta",{"property":"og:url","content":"https://lianyp.fun/java/Java-Guide/Core-Java.html"}],["meta",{"property":"og:site_name","content":"小道空间-Vuepress开源轻博客系统"}],["meta",{"property":"og:title","content":"Java基础语法"}],["meta",{"property":"og:description","content":"代码尽头皆为空,学无止境乃微风。编程途中诡辩多,唯有小道可成功。"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-25T01:28:19.000Z"}],["meta",{"property":"article:author","content":"梁小道"}],["meta",{"property":"article:modified_time","content":"2024-05-25T01:28:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Java基础语法\\",\\"description\\":\\"代码尽头皆为空,学无止境乃微风。编程途中诡辩多,唯有小道可成功。\\"}"]]},"headers":[{"level":2,"title":"变量和数据类型","slug":"变量和数据类型","link":"#变量和数据类型","children":[{"level":3,"title":"变量","slug":"变量","link":"#变量","children":[]},{"level":3,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[]}]},{"level":2,"title":"运算符","slug":"运算符","link":"#运算符","children":[{"level":3,"title":"算术运算符","slug":"算术运算符","link":"#算术运算符","children":[]},{"level":3,"title":"关系运算符","slug":"关系运算符","link":"#关系运算符","children":[]},{"level":3,"title":"逻辑运算符","slug":"逻辑运算符","link":"#逻辑运算符","children":[]},{"level":3,"title":"位运算符","slug":"位运算符","link":"#位运算符","children":[]},{"level":3,"title":"赋值运算符","slug":"赋值运算符","link":"#赋值运算符","children":[]},{"level":3,"title":"其他运算符","slug":"其他运算符","link":"#其他运算符","children":[]},{"level":3,"title":"优先级和结合性","slug":"优先级和结合性","link":"#优先级和结合性","children":[]}]},{"level":2,"title":"控制流","slug":"控制流","link":"#控制流","children":[{"level":3,"title":"顺序结构","slug":"顺序结构","link":"#顺序结构","children":[]},{"level":3,"title":"选择结构","slug":"选择结构","link":"#选择结构","children":[]},{"level":3,"title":"循环结构","slug":"循环结构","link":"#循环结构","children":[]},{"level":3,"title":"跳转结构","slug":"跳转结构","link":"#跳转结构","children":[]}]},{"level":2,"title":"数组","slug":"数组","link":"#数组","children":[{"level":3,"title":"声明数组","slug":"声明数组","link":"#声明数组","children":[]},{"level":3,"title":"创建数组","slug":"创建数组","link":"#创建数组","children":[]},{"level":3,"title":"初始化数组","slug":"初始化数组","link":"#初始化数组","children":[]},{"level":3,"title":"数组的长度","slug":"数组的长度","link":"#数组的长度","children":[]},{"level":3,"title":"遍历数组","slug":"遍历数组","link":"#遍历数组","children":[]},{"level":3,"title":"多维数组","slug":"多维数组","link":"#多维数组","children":[]},{"level":3,"title":"数组的缺点","slug":"数组的缺点","link":"#数组的缺点","children":[]}]},{"level":2,"title":"类和对象","slug":"类和对象","link":"#类和对象","children":[{"level":3,"title":"类的定义","slug":"类的定义","link":"#类的定义","children":[]},{"level":3,"title":"对象的创建","slug":"对象的创建","link":"#对象的创建","children":[]},{"level":3,"title":"对象的访问","slug":"对象的访问","link":"#对象的访问","children":[]},{"level":3,"title":"类的构造方法","slug":"类的构造方法","link":"#类的构造方法","children":[]}]},{"level":2,"title":"方法","slug":"方法","link":"#方法","children":[{"level":3,"title":"方法的定义","slug":"方法的定义","link":"#方法的定义","children":[]},{"level":3,"title":"方法的调用","slug":"方法的调用","link":"#方法的调用","children":[]},{"level":3,"title":"方法的重载","slug":"方法的重载","link":"#方法的重载","children":[]},{"level":3,"title":"方法的重写","slug":"方法的重写","link":"#方法的重写","children":[]},{"level":3,"title":"方法的访问修饰符","slug":"方法的访问修饰符","link":"#方法的访问修饰符","children":[]}]},{"level":2,"title":"包和导入","slug":"包和导入","link":"#包和导入","children":[{"level":3,"title":"包的定义","slug":"包的定义","link":"#包的定义","children":[]},{"level":3,"title":"包的组织结构","slug":"包的组织结构","link":"#包的组织结构","children":[]},{"level":3,"title":"导入","slug":"导入","link":"#导入","children":[]},{"level":3,"title":"显示导入","slug":"显示导入","link":"#显示导入","children":[]},{"level":3,"title":"静态导入","slug":"静态导入","link":"#静态导入","children":[]},{"level":3,"title":"使用包和导入的优势","slug":"使用包和导入的优势","link":"#使用包和导入的优势","children":[]}]},{"level":2,"title":"异常处理","slug":"异常处理","link":"#异常处理","children":[{"level":3,"title":"异常的分类","slug":"异常的分类","link":"#异常的分类","children":[]},{"level":3,"title":"异常处理的关键字","slug":"异常处理的关键字","link":"#异常处理的关键字","children":[]},{"level":3,"title":"try-catch-finally 结构","slug":"try-catch-finally-结构","link":"#try-catch-finally-结构","children":[]},{"level":3,"title":"异常的处理与抛出","slug":"异常的处理与抛出","link":"#异常的处理与抛出","children":[]},{"level":3,"title":"自定义异常","slug":"自定义异常","link":"#自定义异常","children":[]},{"level":3,"title":"常用的异常类","slug":"常用的异常类","link":"#常用的异常类","children":[]}]}],"git":{"createdTime":1716535397000,"updatedTime":1716600499000,"contributors":[{"name":"liangyp","email":"2267841523@qq.com","commits":2}]},"readingTime":{"minutes":14.33,"words":4298},"filePathRelative":"java/Java-Guide/Core-Java.md","localizedDate":"2024年5月24日","excerpt":"<h2>变量和数据类型</h2>\\n<blockquote>\\n<p>Java 是一种静态类型语言，需要在使用变量之前声明其数据类型。\\n常见的数据类型包括整型（int, long）、浮点型（float, double）、字符型（char）、布尔型（boolean）等。\\n变量必须先声明后使用，可以在声明时初始化，也可以单独初始化。</p>\\n</blockquote>\\n<p>下面详细讲解一下 Java 中的变量和数据类型：</p>\\n<h3>变量</h3>\\n<ul>\\n<li><strong>变量</strong>：在程序中用来存储数据的内存空间的名称，就是一种标识符，用来标识存储的值。</li>\\n<li><strong>声明变量</strong>：在 Java 中声明变量需指定变量的数据类型和变量名，如 <code>int age;</code>。</li>\\n<li><strong>初始化变量</strong>：变量声明后需要赋初值才能使用，如 <code>int age = 25;</code>。</li>\\n<li><strong>赋值操作</strong>：使用 <code>=</code> 运算符给变量赋值，如 <code>age = 30;</code>。</li>\\n<li><strong>变量名规则</strong>：变量名必须是合法的标识符，由字母、数字、下划线和美元符组成，不能以数字开头。</li>\\n</ul>"}');export{d as comp,k as data};
