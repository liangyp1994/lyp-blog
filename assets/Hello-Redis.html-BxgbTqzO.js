import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as n}from"./app-DoPi1R1y.js";const i={},t=n(`<p>本文将从基础逐步深入学习Redis的概念，从理论再到实践一点点的理解Redis为什么会如此流行。</p><p>了解什么是Redis 自己搭建一个Redis Redis的数据结构 Redis Stream Redis发布与订阅 Redis 管道 Redis事务 持久化 过期策略 淘汰策略 限流 布隆过滤器 缓存问题 分布式 Lua脚本 Redis 客户端</p><h2 id="了解什么是redis" tabindex="-1"><a class="header-anchor" href="#了解什么是redis"><span>了解什么是Redis</span></a></h2><p>redis是基于内存，开源的一款中间件 非关系型数据库 存储的是key-value键值对。</p><p>基于内存存储，数据访问速度快，性能好</p><p>目前支持APF和RDB两种持久化机制</p><p>支持集群模式，容量可以线性扩展</p><p>支持丰富的数据结构</p><h2 id="redis数据结构" tabindex="-1"><a class="header-anchor" href="#redis数据结构"><span>Redis数据结构</span></a></h2><p>使用较多的有五种数据结构，分别是 字符串，哈希，列表，集合，有序集合</p><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串"><span>字符串</span></a></h3><p>最简单也是最常用的的一种类型，</p><p>常用命令如下：</p><p>get key_name set key_name key_value incr key decr key mget key1 key2 key3 应用场景：计数器 比如要记录接口次数 用来限流。通过累加命令即可实现。虽然这里说的是字符串，但并不是说我们只能存字符串进去 set 命令里的 key_value 也可以是数值型。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token builtin class-name">set</span> key value 缓存某个数据，数据整存整取
setnx key value 分布式锁
incr key 计数器<span class="token punctuation">(</span>比如文章阅读 点赞数<span class="token punctuation">)</span> 流量限流<span class="token punctuation">(</span>尤其是匿名接口<span class="token punctuation">)</span> 分布式系统自增id<span class="token punctuation">(</span>这个看情况吧 应该不至于用到<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>redis的数据结构SDS</strong></p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">sdshdr</span><span class="token punctuation">{</span>
     <span class="token comment">//记录buf数组中已使用字节的数量</span>
     <span class="token comment">//等于 SDS 保存字符串的长度</span>
     <span class="token keyword">int</span> len<span class="token punctuation">;</span>
     <span class="token comment">//记录 buf 数组中未使用字节的数量</span>
     <span class="token keyword">int</span> free<span class="token punctuation">;</span>
     <span class="token comment">//字节数组，用于保存字符串</span>
     <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作者为何如此优秀，要自行定义数据结构呢？</p><p>二进制安全 SDS会将所有接收到的数据转为字符串，包括一些特殊字符，而C语言会吞掉像\\0 这样的特殊字符 内存预分配机制 提前分配字符串需要容量的两倍，当key长度变化时直接在预先分配的内存中修改 兼容C的函数库 是扩展而不是重新创造</p><h3 id="哈希" tabindex="-1"><a class="header-anchor" href="#哈希"><span>哈希</span></a></h3><p>也是很常见的一种结构，redis本身其实就是key-value存储，key-value结构方便我们能快速的通过key定位value值。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>hget key hash_key
hset key hash_key hash_value
hgetall key
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>应用场景：存储结构化的数据 如用户信息 购物车场景</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>hset key field value 添加商品到购物车
hincrby key field increment 增加购物车指定商品的数量
hlen key 获取购物车商品总数
hdel key field field 删除购物车中指定商品
hgetall key 获取购物车中所有商品
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>可以就key的某个field进行修改 设置过期只能针对key 无法指定field</p></blockquote><h3 id="列表" tabindex="-1"><a class="header-anchor" href="#列表"><span>列表</span></a></h3><p>需要与Java里面的list区分开， 这里的列表有点像队列，push是放进去，pop是取出来</p><p>lpush rpush lpop rpop lrange 应用场景：看介绍就知道这种数据结构非常适合做消息队列的，push是产生消息 pop就是消费消息。</p><h3 id="集合" tabindex="-1"><a class="header-anchor" href="#集合"><span>集合</span></a></h3><p>对比list而言，set有个特性就是 自动排重。因为不存在相同元素 所以set还提供了一个方法“判断某元素是否存在set内”。</p><p>应用场景：常用于存储不能重复的集合，既然不可重复就可以非常方便的进行求差集，并集，交集 这些操作。</p><h3 id="有序集合" tabindex="-1"><a class="header-anchor" href="#有序集合"><span>有序集合</span></a></h3><p>与set类似，但是区别是他是自动有序的。还提供了一个score 参数，用户可以通过该值实现元素排序。</p><p>应用场景：通常是一些热点数据，排行榜之内的，访问多而且要求有序，否则用数据库排序就够了。</p><h2 id="redis持久化" tabindex="-1"><a class="header-anchor" href="#redis持久化"><span>Redis持久化</span></a></h2><p>快照方式，将某时刻所有数据都写入硬盘的RDB文件；</p><p>追加文件方式，即将所有写命令都以追加的方式写入硬盘的AOF文件中。</p><p>线上通常会两种一起使用</p><p>RDB 在流量低峰时将所有内存数据存到rdb文件</p><p>AOF 开启 appendonly 将写命令追加道aof文件</p><h2 id="主从复制" tabindex="-1"><a class="header-anchor" href="#主从复制"><span>主从复制</span></a></h2><p>通过主从复制，我们可以实现读写分离，往往实际项目中读操作是远远大于写操作的，我们通过配置master和slave节点，写操作有master负责，而大量的读取操作分发到slave节点。</p><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务"><span>事务</span></a></h2><p>在multi指令后，指定多个操作，然后通过exec指令一次性执行，中途如果出现异常，全部撤回。值得注意的是exec后如果出现异常 就没法回滚了，所以不太可靠，通常还是用数据库来实现事务。</p>`,44),l=[t];function d(p,r){return a(),s("div",null,l)}const u=e(i,[["render",d],["__file","Hello-Redis.html.vue"]]),h=JSON.parse('{"path":"/article/developer/backend/Hello-Redis.html","title":"Redis由浅入深","lang":"zh-CN","frontmatter":{"title":"Redis由浅入深","date":"2024-05-31T00:00:00.000Z","categories":"后端","tags":["Redis"],"description":"本文将从基础逐步深入学习Redis的概念，从理论再到实践一点点的理解Redis为什么会如此流行。 了解什么是Redis 自己搭建一个Redis Redis的数据结构 Redis Stream Redis发布与订阅 Redis 管道 Redis事务 持久化 过期策略 淘汰策略 限流 布隆过滤器 缓存问题 分布式 Lua脚本 Redis 客户端 了解什么是...","head":[["meta",{"property":"og:url","content":"https://lianyp.fun/lyp-blog/article/developer/backend/Hello-Redis.html"}],["meta",{"property":"og:site_name","content":"小道空间-Vuepress开源轻博客系统"}],["meta",{"property":"og:title","content":"Redis由浅入深"}],["meta",{"property":"og:description","content":"本文将从基础逐步深入学习Redis的概念，从理论再到实践一点点的理解Redis为什么会如此流行。 了解什么是Redis 自己搭建一个Redis Redis的数据结构 Redis Stream Redis发布与订阅 Redis 管道 Redis事务 持久化 过期策略 淘汰策略 限流 布隆过滤器 缓存问题 分布式 Lua脚本 Redis 客户端 了解什么是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-31T09:13:50.000Z"}],["meta",{"property":"article:author","content":"梁小道"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:published_time","content":"2024-05-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-31T09:13:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis由浅入深\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-31T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-31T09:13:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"梁小道\\",\\"url\\":\\"https://lianyp.fun\\"}]}"]]},"headers":[{"level":2,"title":"了解什么是Redis","slug":"了解什么是redis","link":"#了解什么是redis","children":[]},{"level":2,"title":"Redis数据结构","slug":"redis数据结构","link":"#redis数据结构","children":[{"level":3,"title":"字符串","slug":"字符串","link":"#字符串","children":[]},{"level":3,"title":"哈希","slug":"哈希","link":"#哈希","children":[]},{"level":3,"title":"列表","slug":"列表","link":"#列表","children":[]},{"level":3,"title":"集合","slug":"集合","link":"#集合","children":[]},{"level":3,"title":"有序集合","slug":"有序集合","link":"#有序集合","children":[]}]},{"level":2,"title":"Redis持久化","slug":"redis持久化","link":"#redis持久化","children":[]},{"level":2,"title":"主从复制","slug":"主从复制","link":"#主从复制","children":[]},{"level":2,"title":"事务","slug":"事务","link":"#事务","children":[]}],"git":{"createdTime":1717146830000,"updatedTime":1717146830000,"contributors":[{"name":"liangyp","email":"2267841523@qq.com","commits":1}]},"readingTime":{"minutes":4.22,"words":1266},"filePathRelative":"article/developer/backend/Hello-Redis.md","localizedDate":"2024年5月31日","excerpt":"<p>本文将从基础逐步深入学习Redis的概念，从理论再到实践一点点的理解Redis为什么会如此流行。</p>\\n<p>了解什么是Redis\\n自己搭建一个Redis\\nRedis的数据结构\\nRedis Stream\\nRedis发布与订阅\\nRedis 管道\\nRedis事务\\n持久化\\n过期策略\\n淘汰策略\\n限流\\n布隆过滤器\\n缓存问题\\n分布式\\nLua脚本\\nRedis 客户端</p>\\n<h2>了解什么是Redis</h2>\\n<p>redis是基于内存，开源的一款中间件 非关系型数据库 存储的是key-value键值对。</p>\\n<p>基于内存存储，数据访问速度快，性能好</p>\\n<p>目前支持APF和RDB两种持久化机制</p>","autoDesc":true}');export{u as comp,h as data};
