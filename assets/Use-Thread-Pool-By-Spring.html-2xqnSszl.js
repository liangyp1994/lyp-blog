import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,a as t}from"./app-Co8UXNfU.js";const p={},e=t(`<h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h2><p>在配置中添加一个 Bean</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;taskExecutor&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ThreadPoolTaskExecutor</span> <span class="token function">taskExecutor</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ThreadPoolTaskExecutor</span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pool<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">&quot;-------------OPS线程池-----------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pool<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getCorePoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pool<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getMaxPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pool<span class="token punctuation">.</span><span class="token function">setKeepAliveSeconds</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getKeepAliveSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pool<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getQueueCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 拒绝策略：在当前线程执行</span>
        pool<span class="token punctuation">.</span><span class="token function">setRejectedExecutionHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 初始化</span>
        pool<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> pool<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><p>场景1：定义一个组件，使用@Async来使用 taskExecutor 线程池</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsynchronousTask</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">OpsOrderHistoryService</span> opsOrderHistoryService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Async</span><span class="token punctuation">(</span><span class="token string">&quot;taskExecutor&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recordOrderHistory</span><span class="token punctuation">(</span><span class="token class-name">OpsOrderHistory</span> opsOrderHistory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            opsOrderHistoryService<span class="token punctuation">.</span><span class="token function">insertSelective</span><span class="token punctuation">(</span>opsOrderHistory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>当调用 recordOrderHistory 方法，会使用OPS线程池执行上面的插入操作，如果拒绝策略生效则使用当前调用线程执行</p></blockquote>`,7),o=[e];function c(i,l){return a(),s("div",null,o)}const k=n(p,[["render",c],["__file","Use-Thread-Pool-By-Spring.html.vue"]]),d=JSON.parse('{"path":"/article/developer/backend/Use-Thread-Pool-By-Spring.html","title":"如何在SpringBoot中使用线程池","lang":"zh-CN","frontmatter":{"title":"如何在SpringBoot中使用线程池","date":"2024-05-30T00:00:00.000Z","description":"配置 在配置中添加一个 Bean 使用 场景1：定义一个组件，使用@Async来使用 taskExecutor 线程池 当调用 recordOrderHistory 方法，会使用OPS线程池执行上面的插入操作，如果拒绝策略生效则使用当前调用线程执行","head":[["meta",{"property":"og:url","content":"https://lianyp.fun/lyp-blog/article/developer/backend/Use-Thread-Pool-By-Spring.html"}],["meta",{"property":"og:site_name","content":"小道空间-Vuepress开源轻博客系统"}],["meta",{"property":"og:title","content":"如何在SpringBoot中使用线程池"}],["meta",{"property":"og:description","content":"配置 在配置中添加一个 Bean 使用 场景1：定义一个组件，使用@Async来使用 taskExecutor 线程池 当调用 recordOrderHistory 方法，会使用OPS线程池执行上面的插入操作，如果拒绝策略生效则使用当前调用线程执行"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-30T09:15:37.000Z"}],["meta",{"property":"article:author","content":"梁小道"}],["meta",{"property":"article:published_time","content":"2024-05-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-05-30T09:15:37.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何在SpringBoot中使用线程池\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-05-30T00:00:00.000Z\\",\\"dateModified\\":\\"2024-05-30T09:15:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"梁小道\\",\\"url\\":\\"https://lianyp.fun\\"}]}"]]},"headers":[{"level":2,"title":"配置","slug":"配置","link":"#配置","children":[]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[]}],"git":{"createdTime":1717060537000,"updatedTime":1717060537000,"contributors":[{"name":"liangyp","email":"2267841523@qq.com","commits":1}]},"readingTime":{"minutes":0.53,"words":158},"filePathRelative":"article/developer/backend/Use-Thread-Pool-By-Spring.md","localizedDate":"2024年5月30日","excerpt":"<h2>配置</h2>\\n<p>在配置中添加一个 Bean</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token annotation punctuation\\">@Bean</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"taskExecutor\\"</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">ThreadPoolTaskExecutor</span> <span class=\\"token function\\">taskExecutor</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ThreadPoolProperties</span> properties<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">ThreadPoolTaskExecutor</span> pool <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ThreadPoolTaskExecutor</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        pool<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setThreadNamePrefix</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"-------------OPS线程池-----------------\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        pool<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setCorePoolSize</span><span class=\\"token punctuation\\">(</span>properties<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getCorePoolSize</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        pool<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setMaxPoolSize</span><span class=\\"token punctuation\\">(</span>properties<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getMaxPoolSize</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        pool<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setKeepAliveSeconds</span><span class=\\"token punctuation\\">(</span>properties<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getKeepAliveSeconds</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        pool<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setQueueCapacity</span><span class=\\"token punctuation\\">(</span>properties<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getQueueCapacity</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 拒绝策略：在当前线程执行</span>\\n        pool<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">setRejectedExecutionHandler</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">ThreadPoolExecutor<span class=\\"token punctuation\\">.</span>CallerRunsPolicy</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token comment\\">// 初始化</span>\\n        pool<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">initialize</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">return</span> pool<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{k as comp,d as data};
