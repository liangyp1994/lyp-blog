import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,o as a,a as e}from"./app-DoPi1R1y.js";const l={},o=e(`<h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念"><span>基本概念</span></a></h2><ol><li><p><strong>表（Table）：</strong></p><ul><li>表是关系数据库中的基本组织单位，用于存储特定类型的数据。表由行（记录）和列（字段）组成，是数据的逻辑结构。</li></ul></li><li><p><strong>字段（Column）：</strong></p><ul><li>表中的字段是数据的具体分类和存储单位，可以理解为数据的属性或特征。每个字段存储特定类型的数据，例如姓名、年龄、地址等。</li></ul></li><li><p><strong>主键（Primary Key）：</strong></p><ul><li>主键是一种唯一标识表中每一行数据的字段。主键的值必须唯一，并且不能是空值。主键的存在可以方便数据的检索和关联。</li></ul></li><li><p><strong>外键（Foreign Key）：</strong></p><ul><li>外键是一个表的字段，它指向另一个表中的主键，用来建立表与表之间的关联。外键能确保了数据的完整性和一致性，使不同表之间的关联更加稳固。</li></ul></li></ol><h2 id="sql的基本语法" tabindex="-1"><a class="header-anchor" href="#sql的基本语法"><span>SQL的基本语法</span></a></h2><p>SQL（结构化查询语言）是用于管理关系数据库系统中的数据的标准语言，以下是SQL的基本语法：</p><ol><li><p><strong>查询数据：</strong></p><ul><li>使用SELECT语句来从数据库中检索数据，语法示例：<code>SELECT column1, column2 FROM table_name WHERE condition;</code></li></ul></li><li><p><strong>插入数据：</strong></p><ul><li>使用INSERT INTO语句将新数据插入到数据库表中，语法示例：<code>INSERT INTO table_name (column1, column2) VALUES (value1, value2);</code></li></ul></li><li><p><strong>更新数据：</strong></p><ul><li>使用UPDATE语句来更新表中的现有记录，语法示例：<code>UPDATE table_name SET column1 = value1 WHERE condition;</code></li></ul></li><li><p><strong>删除数据：</strong></p><ul><li>使用DELETE FROM语句来从数据库表中删除记录，语法示例：<code>DELETE FROM table_name WHERE condition;</code></li></ul></li><li><p><strong>创建新表：</strong></p><ul><li>使用CREATE TABLE语句创建新的数据库表，语法示例：<code>CREATE TABLE table_name (column1 datatype, column2 datatype, column3 datatype);</code></li></ul></li><li><p><strong>修改表结构：</strong></p><ul><li>使用ALTER TABLE语句来修改现有表的结构，语法示例：<code>ALTER TABLE table_name ADD column_name datatype;</code></li></ul></li><li><p><strong>删除表：</strong></p><ul><li>使用DROP TABLE语句删除现有的数据库表，语法示例：<code>DROP TABLE table_name;</code></li></ul></li></ol><blockquote><p>这些是SQL中最基本的语法，可以完成对数据库进行基本的查询、插入、更新和删除操作，以及对数据库表的创建、修改和删除操作。深入理解并掌握SQL的基本语法能够帮助你更好地操作和管理数据库。</p></blockquote><h2 id="数据库管理系统" tabindex="-1"><a class="header-anchor" href="#数据库管理系统"><span>数据库管理系统</span></a></h2><p>数据库管理系统（DBMS）是一种软件系统，用于管理数据库的创建、访问、管理、检索和更新等任务。它提供了一个结构化的数据存储机制，并提供了一系列的操作和功能，以便用户和应用程序可以方便地使用和维护数据库。数据库管理系统的一些主要特点包括：</p><ol><li><p><strong>数据定义和数据操作语言：</strong></p><ul><li>数据库管理系统提供了用于定义数据结构（例如表、字段等）和操作数据的语言，如SQL（结构化查询语言）。</li></ul></li><li><p><strong>数据安全性和完整性：</strong></p><ul><li>DBMS能够对数据进行权限控制，保护数据不被未经授权的用户访问、修改或删除。它还能确保数据的完整性，通过强制实施数据的约束条件（如主键、外键等）。</li></ul></li><li><p><strong>并发控制：</strong></p><ul><li>DBMS允许多个用户或应用程序同时访问和操作数据库，而不会产生数据冲突或损坏。</li></ul></li><li><p><strong>数据恢复和备份：</strong></p><ul><li>数据库管理系统提供了备份和恢复机制，以便在数据丢失或损坏时能够进行恢复。</li></ul></li><li><p><strong>性能优化和查询优化：</strong></p><ul><li>DBMS能够根据需要对数据进行索引、优化和缓存，以提高查询速度和系统性能。</li></ul></li></ol><blockquote><p>一些常见的数据库管理系统包括MySQL、Oracle、Microsoft SQL Server、PostgreSQL和MongoDB等。DBMS在实际应用中起着极为重要的作用，我们几乎可以在每个领域都发现它的身影。</p></blockquote><h2 id="基本操作" tabindex="-1"><a class="header-anchor" href="#基本操作"><span>基本操作</span></a></h2><p>学习数据库的基本管理操作是非常重要的，因为它们是建立和维护数据库的基础知识。以下是一些常见的数据库管理操作，包括创建数据库、创建表、用户管理等：</p><ol><li><p><strong>创建数据库：</strong></p><ul><li>使用CREATE DATABASE语句创建新的数据库。例如，在MySQL中创建名为<code>mydatabase</code>的数据库：<code>CREATE DATABASE mydatabase;</code></li></ul></li><li><p><strong>选择数据库：</strong></p><ul><li>使用USE语句选择要操作的数据库。例如，在MySQL中选择<code>mydatabase</code>数据库：<code>USE mydatabase;</code></li></ul></li><li><p><strong>创建表：</strong></p><ul><li>使用CREATE TABLE语句创建新的表。例如，在MySQL中创建名为<code>users</code>的用户表：<code>CREATE TABLE users (id INT, name VARCHAR(50), email VARCHAR(50));</code></li></ul></li><li><p><strong>查看表结构：</strong></p><ul><li>使用DESCRIBE语句查看表的结构。例如，在MySQL中查看<code>users</code>表结构：<code>DESCRIBE users;</code></li></ul></li><li><p><strong>插入数据：</strong></p><ul><li>使用INSERT INTO语句将数据插入到表中。例如，在MySQL中向<code>users</code>表插入一条数据：<code>INSERT INTO users (id, name, email) VALUES (1, &#39;John Doe&#39;, &#39;johndoe@example.com&#39;);</code></li></ul></li><li><p><strong>更新数据：</strong></p><ul><li>使用UPDATE语句更新表中的数据。例如，在MySQL中更新<code>users</code>表中id为1的用户的邮箱地址：<code>UPDATE users SET email=&#39;newemail@example.com&#39; WHERE id=1;</code></li></ul></li><li><p><strong>删除数据：</strong></p><ul><li>使用DELETE FROM语句从表中删除数据。例如，在MySQL中删除<code>users</code>表中id为1的用户数据：<code>DELETE FROM users WHERE id=1;</code></li></ul></li><li><p><strong>用户管理：</strong></p><ul><li>创建用户、授予用户权限、修改用户密码等，这些可以通过数据库管理系统的特定语句或工具进行操作，具体操作方法因不同的数据库管理系统而异，而且同一个数据库管理系统的不同版本也会有差异。</li></ul></li></ol><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p>当涉及MySQL数据库管理系统时，以下是一些具体的操作案例，涵盖了创建数据库、创建表、插入数据以及用户管理等：</p><ol><li><p><strong>创建数据库：</strong></p><ul><li>使用CREATE DATABASE语句创建一个名为<code>mydatabase</code>的新数据库：</li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> mydatabase<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>选择数据库：</strong></p><ul><li>使用USE语句选择要操作的数据库。例如，选择<code>mydatabase</code>数据库：</li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">USE</span> mydatabase<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>创建表：</strong></p><ul><li>使用CREATE TABLE语句创建名为<code>users</code>的用户表，包括id、name和email字段：</li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> users <span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    email <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>插入数据：</strong></p><ul><li>使用INSERT INTO语句将数据插入到表中。例如，向<code>users</code>表插入一条数据：</li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> users <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;John Doe&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;johndoe@example.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>更新数据：</strong></p><ul><li>使用UPDATE语句更新表中的数据。例如，更新<code>users</code>表中id为1的用户的邮箱地址：</li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> users <span class="token keyword">SET</span> email<span class="token operator">=</span><span class="token string">&#39;newemail@example.com&#39;</span> <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>删除数据：</strong></p><ul><li>使用DELETE FROM语句从表中删除数据。例如，删除<code>users</code>表中id为1的用户数据：</li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>用户管理：</strong></p><ul><li>创建用户、授予用户权限等操作可以使用MySQL的特定语句或工具进行。例如，创建新用户并授予对<code>mydatabase</code>数据库的全部权限：</li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">&#39;用户名&#39;</span><span class="token variable">@&#39;%或者IP&#39;</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;密码&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> 数据库名<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">&#39;用户名&#39;</span><span class="token variable">@&#39;IP/localhost/%&#39;</span><span class="token punctuation">;</span>
FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>上面的用户管理案例是基于MySQL 5.7版本的语法。MySQL 8.0版本在用户管理方面进行了一些改变，引入了更加灵活和安全的权限管理系统。</p><p>在MySQL 8.0中，创建用户和授予权限的语法略有变化。以下是在MySQL 8.0中创建用户和授予权限的示例：</p><p><strong>创建用户和授予权限：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 创建用户</span>
<span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">&#39;用户名&#39;</span><span class="token variable">@&#39;%或者IP&#39;</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;密码&#39;</span><span class="token punctuation">;</span>
<span class="token comment"># 授权某个用户所有数据库所有权限</span>
<span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">&quot;用户名&quot;</span><span class="token variable">@&quot;IP/localhost/%&quot;</span>
<span class="token comment"># 授予某个用户所有数据库读权限</span>
<span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">&#39;用户名&#39;</span><span class="token variable">@&#39;%或者IP&#39;</span> <span class="token punctuation">;</span>
<span class="token comment"># 授予某个用户某个数据库写权限</span>
<span class="token keyword">GRANT</span> <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> <span class="token identifier"><span class="token punctuation">\`</span>数据库名<span class="token punctuation">\`</span></span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">&#39;用户名&#39;</span><span class="token variable">@&#39;%或者IP&#39;</span><span class="token punctuation">;</span>
FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，从MySQL 8.0开始，推荐使用ALTER USER语句来设置用户属性和权限，而不是直接使用GRANT和REVOKE语句。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>数据库是一门很深的课程，本节只是简单的介绍了一下它的核心知识点，后续还需要不断的深入学习。学习数据库就跟我们开车一样的，要不断地实践。</p></div>`,22),t=[o];function p(i,c){return a(),n("div",null,t)}const u=s(l,[["render",p],["__file","Core-Database.html.vue"]]),k=JSON.parse('{"path":"/database/Core-Database.html","title":"数据库基础","lang":"zh-CN","frontmatter":{"title":"数据库基础","article":false,"order":1,"description":"代码尽头皆为空,学无止境乃微风。编程途中诡辩多,唯有小道可成功。","head":[["meta",{"property":"og:url","content":"https://lianyp.fun/lyp-blog/database/Core-Database.html"}],["meta",{"property":"og:site_name","content":"小道空间-Vuepress开源轻博客系统"}],["meta",{"property":"og:title","content":"数据库基础"}],["meta",{"property":"og:description","content":"代码尽头皆为空,学无止境乃微风。编程途中诡辩多,唯有小道可成功。"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-24T07:23:17.000Z"}],["meta",{"property":"article:author","content":"梁小道"}],["meta",{"property":"article:modified_time","content":"2024-05-24T07:23:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"数据库基础\\",\\"description\\":\\"代码尽头皆为空,学无止境乃微风。编程途中诡辩多,唯有小道可成功。\\"}"]]},"headers":[{"level":2,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":2,"title":"SQL的基本语法","slug":"sql的基本语法","link":"#sql的基本语法","children":[]},{"level":2,"title":"数据库管理系统","slug":"数据库管理系统","link":"#数据库管理系统","children":[]},{"level":2,"title":"基本操作","slug":"基本操作","link":"#基本操作","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}]}],"git":{"createdTime":1716535397000,"updatedTime":1716535397000,"contributors":[{"name":"liangyp","email":"2267841523@qq.com","commits":1}]},"readingTime":{"minutes":7.07,"words":2122},"filePathRelative":"database/Core-Database.md","localizedDate":"2024年5月24日","excerpt":"<h2>基本概念</h2>\\n<ol>\\n<li>\\n<p><strong>表（Table）：</strong></p>\\n<ul>\\n<li>表是关系数据库中的基本组织单位，用于存储特定类型的数据。表由行（记录）和列（字段）组成，是数据的逻辑结构。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>字段（Column）：</strong></p>\\n<ul>\\n<li>表中的字段是数据的具体分类和存储单位，可以理解为数据的属性或特征。每个字段存储特定类型的数据，例如姓名、年龄、地址等。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>主键（Primary Key）：</strong></p>\\n<ul>\\n<li>主键是一种唯一标识表中每一行数据的字段。主键的值必须唯一，并且不能是空值。主键的存在可以方便数据的检索和关联。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>外键（Foreign Key）：</strong></p>\\n<ul>\\n<li>外键是一个表的字段，它指向另一个表中的主键，用来建立表与表之间的关联。外键能确保了数据的完整性和一致性，使不同表之间的关联更加稳固。</li>\\n</ul>\\n</li>\\n</ol>"}');export{u as comp,k as data};
